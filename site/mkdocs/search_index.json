{
    "docs": [
        {
            "location": "/", 
            "text": "ZeroDiff\n\n\nAn Agile Process for Hardware Design and Development\n\n\n\n\nA New Way to Design and Develop Products\n\n\nA Simple Philosophy\n\n\n\n\nIf you maintain zero difference between prototype and production designs, as you rapidly iterate, you can mass produce any revision.\n\n\n\n\nCorollary\n\n\n\n\nAlways manufacture prototype and production designs on the same tooling - \nalways\n.\n\n\n\n\nOverview\n\n\nThis site hosts the ZeroDiff process documentation. It captures knowledge that small teams can use to produce high-value objects at low-to-medium volumes. The process is similar to the design and development of modern software: build an MVP and then rapidly iterate design and development. Every iteration, e.g. a github commit, \"goes live\" with real users in order to perform value testing. This process repeats for an ever-growing user base on an ever-growing product value. The current consensus is that it takes 15 product design iterations to reach maximal user value, so if you want to estimate when your design will reach its optimal mass-production utility, then multiply your iteration cycle time by 15.\n\n\nKill the Waterfall Method (Again!)\n\n\ni.e. Crowdsource, Works-Like/Looks-Like, Shenzhen\n\n\nPrior to the 2000s, software development followed a processed called The Waterfall Method. Product development would follow a sequence: conception, analysis, design, construction and testing. 12-18 months might pass before users saw anything, and if they wanted changes or didn't like features, it might be another 12-18 months before they would see those changes. It was pretty awful, and no good software product designer would ever want to go back to those times. Today, software developers follow a lean or agile practice that involves small, rapid iterations with continual and close user-value testing. Each iteration allows for incremental investments target toward value and user growth.\n\n\nSo why are hard good designers stuck in the Waterfall Methodology? Set aside the debate of just how easy/cheap it is to fly to Shenzhen to engage a fab/CMS in supply chain execution, there are two major problems with this approach:\n\n\n\n\nThe team is working toward a single manufactured revision given imperfect user testing - a kind of Hail Mary pass.\n\n\nThe product users are somewhere else, so for the factory design team, user empathy is low.\n\n\n\n\nThe whole point of ZeroDiff is to rapidly iterate with the users close at hand. Maybe you build ten of the first version and get them into the hands of real users. This allows the product design team to evaluate the user experience and propose design changes that show up in the next iteration with 1-2 weeks. Each successive iteration grows the product value, and potentially grows the user base. Since every revision is production-ready, the development team can select any revision for mass production. At that point, if your demand is high and you need MoQ 10K production runs then it's super simple to take your latest rev to Shenzhen. The rest of us (most of us) can continue to produce economically in low-volume close to where we live.\n\n\nPermission-based Production is Terrible\n\n\nAs small-batch production become less economically viable, product design teams find themselves in a permission-based production model where they have to convince a fab or CMS of the value of their job over other jobs. Most modern fabs will quickly design prototypes and produce samples in order to win larger business later, but they will not run those designs at low volume unless there's no other work on the line. To make things worse, the production-version designs and fab/assembly docs are generally not accessible to the product design team, making it painful and expensive to switch fabs.\n\n\nThe Joys of High-Value at Low-Volume\n\n\nA side-effect of the ZeroDiff process is that small-batch production is something you can do economically on short development cycles and low unit volume. \"Value\" is a complex word, but in production we tend to boil it down to simple economics. What happens when an object's cost or sale prices is not a major component of its value? That gives us the luxury to chose the many other definitions of value. Perhaps we can choose to make things because they increase our enjoyment, or relieve the suffering of others. The possibilities are enormous and liberating!", 
            "title": "Home"
        }, 
        {
            "location": "/#zerodiff", 
            "text": "", 
            "title": "ZeroDiff"
        }, 
        {
            "location": "/#an-agile-process-for-hardware-design-and-development", 
            "text": "", 
            "title": "An Agile Process for Hardware Design and Development"
        }, 
        {
            "location": "/#a-new-way-to-design-and-develop-products", 
            "text": "", 
            "title": "A New Way to Design and Develop Products"
        }, 
        {
            "location": "/#a-simple-philosophy", 
            "text": "If you maintain zero difference between prototype and production designs, as you rapidly iterate, you can mass produce any revision.", 
            "title": "A Simple Philosophy"
        }, 
        {
            "location": "/#corollary", 
            "text": "Always manufacture prototype and production designs on the same tooling -  always .", 
            "title": "Corollary"
        }, 
        {
            "location": "/#overview", 
            "text": "This site hosts the ZeroDiff process documentation. It captures knowledge that small teams can use to produce high-value objects at low-to-medium volumes. The process is similar to the design and development of modern software: build an MVP and then rapidly iterate design and development. Every iteration, e.g. a github commit, \"goes live\" with real users in order to perform value testing. This process repeats for an ever-growing user base on an ever-growing product value. The current consensus is that it takes 15 product design iterations to reach maximal user value, so if you want to estimate when your design will reach its optimal mass-production utility, then multiply your iteration cycle time by 15.", 
            "title": "Overview"
        }, 
        {
            "location": "/#kill-the-waterfall-method-again", 
            "text": "", 
            "title": "Kill the Waterfall Method (Again!)"
        }, 
        {
            "location": "/#ie-crowdsource-works-likelooks-like-shenzhen", 
            "text": "Prior to the 2000s, software development followed a processed called The Waterfall Method. Product development would follow a sequence: conception, analysis, design, construction and testing. 12-18 months might pass before users saw anything, and if they wanted changes or didn't like features, it might be another 12-18 months before they would see those changes. It was pretty awful, and no good software product designer would ever want to go back to those times. Today, software developers follow a lean or agile practice that involves small, rapid iterations with continual and close user-value testing. Each iteration allows for incremental investments target toward value and user growth.  So why are hard good designers stuck in the Waterfall Methodology? Set aside the debate of just how easy/cheap it is to fly to Shenzhen to engage a fab/CMS in supply chain execution, there are two major problems with this approach:   The team is working toward a single manufactured revision given imperfect user testing - a kind of Hail Mary pass.  The product users are somewhere else, so for the factory design team, user empathy is low.   The whole point of ZeroDiff is to rapidly iterate with the users close at hand. Maybe you build ten of the first version and get them into the hands of real users. This allows the product design team to evaluate the user experience and propose design changes that show up in the next iteration with 1-2 weeks. Each successive iteration grows the product value, and potentially grows the user base. Since every revision is production-ready, the development team can select any revision for mass production. At that point, if your demand is high and you need MoQ 10K production runs then it's super simple to take your latest rev to Shenzhen. The rest of us (most of us) can continue to produce economically in low-volume close to where we live.", 
            "title": "i.e. Crowdsource, Works-Like/Looks-Like, Shenzhen"
        }, 
        {
            "location": "/#permission-based-production-is-terrible", 
            "text": "As small-batch production become less economically viable, product design teams find themselves in a permission-based production model where they have to convince a fab or CMS of the value of their job over other jobs. Most modern fabs will quickly design prototypes and produce samples in order to win larger business later, but they will not run those designs at low volume unless there's no other work on the line. To make things worse, the production-version designs and fab/assembly docs are generally not accessible to the product design team, making it painful and expensive to switch fabs.", 
            "title": "Permission-based Production is Terrible"
        }, 
        {
            "location": "/#the-joys-of-high-value-at-low-volume", 
            "text": "A side-effect of the ZeroDiff process is that small-batch production is something you can do economically on short development cycles and low unit volume. \"Value\" is a complex word, but in production we tend to boil it down to simple economics. What happens when an object's cost or sale prices is not a major component of its value? That gives us the luxury to chose the many other definitions of value. Perhaps we can choose to make things because they increase our enjoyment, or relieve the suffering of others. The possibilities are enormous and liberating!", 
            "title": "The Joys of High-Value at Low-Volume"
        }, 
        {
            "location": "/design/empathy/", 
            "text": "User Empathy\n\n\nAll design, to some extent, involves relativism. A breast cancer screening center in a typical hospital complex might use a typical clinic design to maximizes patient privacy and treatment efficiency. Unlike other clinics, these practices perform stressful and painful examinations of more than half the adult population. A designer who empathizes with users in this setting might employ a different design: curved walls, subdued lighting, medium tonal colors, waterfalls, generous robes, coffee and peaceful quietude (i.e. not forced to listen to someone else's music). Such a clinic exists, and the experience of that clinic is radically different.\n\n\nNotice we make no call to prescriptive design policy - instead we believe it's valuable, perhaps essential, to understand relativism when you set out to empathize with your users. An opinionated point of view is good, but that needs to come from the culture and humans who will occupy the design.\n\n\nMid-Century Designers\n\n\nBecause ZeroDiff is about low-volume production, a better analogy for these designs originate in architecture. Sure, Dieter Rams produces glorious products, but these are mass market objects offered on a take-it-or-leave-it basis. A large corporation will produce dozens or more objects per year, only a handful end up at mass-scale, and even then there are hits and misses.\n\n\nThe great Mid-Century designers like Richard Neutra, Mary Colter, and Eliot Noyes would spend considerable time with the site and the client in order to understand how they might occupy a space. Richard Neutra worked directly with end users for all his projects no matter how small.\n\n\n\n\nI am an eyewitness to the ways in which people relate to themselves and to each other, and my work is a way of scooping and ladling that experience.\n\n\nRichard Neutra\n\n\n\n\nThis quote is beautiful because he generously allows the design to originate from the end users rather than a design \"school of thought.\" One could argue that certain design thoughts represent a timelessness that stands apart from the end users, but even Bauhaus, as taught by Bruno Taut, embraced Humane Functionalism.", 
            "title": "User Empathy"
        }, 
        {
            "location": "/design/empathy/#user-empathy", 
            "text": "All design, to some extent, involves relativism. A breast cancer screening center in a typical hospital complex might use a typical clinic design to maximizes patient privacy and treatment efficiency. Unlike other clinics, these practices perform stressful and painful examinations of more than half the adult population. A designer who empathizes with users in this setting might employ a different design: curved walls, subdued lighting, medium tonal colors, waterfalls, generous robes, coffee and peaceful quietude (i.e. not forced to listen to someone else's music). Such a clinic exists, and the experience of that clinic is radically different.  Notice we make no call to prescriptive design policy - instead we believe it's valuable, perhaps essential, to understand relativism when you set out to empathize with your users. An opinionated point of view is good, but that needs to come from the culture and humans who will occupy the design.", 
            "title": "User Empathy"
        }, 
        {
            "location": "/design/empathy/#mid-century-designers", 
            "text": "Because ZeroDiff is about low-volume production, a better analogy for these designs originate in architecture. Sure, Dieter Rams produces glorious products, but these are mass market objects offered on a take-it-or-leave-it basis. A large corporation will produce dozens or more objects per year, only a handful end up at mass-scale, and even then there are hits and misses.  The great Mid-Century designers like Richard Neutra, Mary Colter, and Eliot Noyes would spend considerable time with the site and the client in order to understand how they might occupy a space. Richard Neutra worked directly with end users for all his projects no matter how small.   I am an eyewitness to the ways in which people relate to themselves and to each other, and my work is a way of scooping and ladling that experience.  Richard Neutra   This quote is beautiful because he generously allows the design to originate from the end users rather than a design \"school of thought.\" One could argue that certain design thoughts represent a timelessness that stands apart from the end users, but even Bauhaus, as taught by Bruno Taut, embraced Humane Functionalism.", 
            "title": "Mid-Century Designers"
        }, 
        {
            "location": "/design/essential_user_task/", 
            "text": "First Principles\n\n\n\n\n\u201cI think it is important to reason from first principles rather than by analogy. The normal way we conduct our lives is we reason by analogy. [When reasoning by analogy] we are doing this because it\u2019s like something else that was done or it is like what other people are doing \u2014 slight iterations on a theme.\n\n\nFirst principles is kind of a physics way of looking at the world. You boil things down to the most fundamental truths and say, \u201cWhat are we sure is true?\u201d \u2026 and then reason up from there.\n\n\nElon Musk\n\n\n\n\nIn design, the first principles are the irreducible essence of a user's task or goal. It is not about the steps or the artifacts, but the user goal state. Usually, these will be short statements that seem somewhat obvious. If you cannot reduce a user task to first principles, then likely you don't understand the task.\n\n\nEssential User Task\n\n\nAn essential user tasks tends to be simple (maybe even obvious), foundational and irreducible. \n\n\nThe first step to good design is to \nunderstand\n what the user needs to accomplish and why. Our favorite example is the programmable thermostat: for decades thermostats accreted features and behaviors: setpoints, programmability, connectedness, memory, battery backup and so on, but the user experience of them remained awful. In 2010 NestLabs deduced that the original designs all failed to grasp the essential user task: maintain situation-aware comfort when the user is at home, and to save power at all other times. Given this simple, clear essential user task, it becomes painfully obvious that features like setpoints and programs were artifacts the designers imposed on the user that did not directly address the user's core need.\n\n\nExample essential user tasks:\n\n\n\n\nI need to prepare to host 20 people at a backyard BBQ Saturday.\n\n\nI need to launch 5,000 kilos into low Earth orbit.\n\n\n\n\nThis may seem simplistic, but when you pare back the \ngoal\n to its irreducible version, you can see how anything the designer adds is really an artifact, and not the goal itself. Artifacts are the choices that service the goal. For a BBQ there are many questions and artifact that derive from the essential user task: Supplies? Instacart? Whole Foods? BevMo? Prep? Furniture? RSVPs? As user and design stories build, it should be possible to validate that each one directly services the essential user task. You can cut everything else.\n\n\nIt's important not to confuse these artifacts with the essential user task itself. The approach to addressing the essential user task will be different among designers, and that will result in a different set of artifacts, but each set, if it really services the essential task, should render a praiseworthy solution.", 
            "title": "First Principles"
        }, 
        {
            "location": "/design/essential_user_task/#first-principles", 
            "text": "\u201cI think it is important to reason from first principles rather than by analogy. The normal way we conduct our lives is we reason by analogy. [When reasoning by analogy] we are doing this because it\u2019s like something else that was done or it is like what other people are doing \u2014 slight iterations on a theme.  First principles is kind of a physics way of looking at the world. You boil things down to the most fundamental truths and say, \u201cWhat are we sure is true?\u201d \u2026 and then reason up from there.  Elon Musk   In design, the first principles are the irreducible essence of a user's task or goal. It is not about the steps or the artifacts, but the user goal state. Usually, these will be short statements that seem somewhat obvious. If you cannot reduce a user task to first principles, then likely you don't understand the task.", 
            "title": "First Principles"
        }, 
        {
            "location": "/design/essential_user_task/#essential-user-task", 
            "text": "An essential user tasks tends to be simple (maybe even obvious), foundational and irreducible.   The first step to good design is to  understand  what the user needs to accomplish and why. Our favorite example is the programmable thermostat: for decades thermostats accreted features and behaviors: setpoints, programmability, connectedness, memory, battery backup and so on, but the user experience of them remained awful. In 2010 NestLabs deduced that the original designs all failed to grasp the essential user task: maintain situation-aware comfort when the user is at home, and to save power at all other times. Given this simple, clear essential user task, it becomes painfully obvious that features like setpoints and programs were artifacts the designers imposed on the user that did not directly address the user's core need.", 
            "title": "Essential User Task"
        }, 
        {
            "location": "/design/essential_user_task/#example-essential-user-tasks", 
            "text": "I need to prepare to host 20 people at a backyard BBQ Saturday.  I need to launch 5,000 kilos into low Earth orbit.   This may seem simplistic, but when you pare back the  goal  to its irreducible version, you can see how anything the designer adds is really an artifact, and not the goal itself. Artifacts are the choices that service the goal. For a BBQ there are many questions and artifact that derive from the essential user task: Supplies? Instacart? Whole Foods? BevMo? Prep? Furniture? RSVPs? As user and design stories build, it should be possible to validate that each one directly services the essential user task. You can cut everything else.  It's important not to confuse these artifacts with the essential user task itself. The approach to addressing the essential user task will be different among designers, and that will result in a different set of artifacts, but each set, if it really services the essential task, should render a praiseworthy solution.", 
            "title": "Example essential user tasks:"
        }, 
        {
            "location": "/design/fewer/", 
            "text": "Make fewer things that are more valuable\n\n\n\n\nGood design is good business.\n\n\nEliot Noyes\n\n\n\n\nA good, iterative design process will identify early which objects have \"pull\" and which do not. It's important to kill mediocre or bad product before it gets far into the process. Invest instead in making just a few objects that are great. The only way to learn this stuff early is to iterate rapidly and measure, measure, measure. ZeroDiff and a good design methodology allows you to run these tests quickly. It's true that some mediocre product concepts might flip to great because small design changes can have chaotic impacts on product value. As a small organization you do not have the luxury to chase these leprechauns. It's wiser to focus on the products that demonstrate excellence early in the process.", 
            "title": "Make Fewer Things"
        }, 
        {
            "location": "/design/fewer/#make-fewer-things-that-are-more-valuable", 
            "text": "Good design is good business.  Eliot Noyes   A good, iterative design process will identify early which objects have \"pull\" and which do not. It's important to kill mediocre or bad product before it gets far into the process. Invest instead in making just a few objects that are great. The only way to learn this stuff early is to iterate rapidly and measure, measure, measure. ZeroDiff and a good design methodology allows you to run these tests quickly. It's true that some mediocre product concepts might flip to great because small design changes can have chaotic impacts on product value. As a small organization you do not have the luxury to chase these leprechauns. It's wiser to focus on the products that demonstrate excellence early in the process.", 
            "title": "Make fewer things that are more valuable"
        }, 
        {
            "location": "/design/teach/", 
            "text": "Teach, Don't Lead\n\n\nDesign happens at all levels of the product development process. Great designers realize they make a bigger impact when they teach the entire organization good design methodology. \n\n\nOur experience is that developer team uptake for design methodology is uneven. Often the resistant teams don't understand the design process value because it seems simplistic or superfluous to coding and construction. Teams like this typically feel more comfortable banging out user stories or specifications. While true they can make the code match these stores well, perhaps in pleasing ways, the resulting work may not address need, or misses that \"a-ha\" experience where you understand at an entirely different level. These teams are almost never hostile about this, so you can get them to begrudgingly change their methodology \"this one time.\" They might complain about it before and during, but often they'll look back and think, \"Wow, we would never have gotten here in the traditional methodology.\" That doesn't mean you won't have to drag them kicking and scratching into more design sprints, but they will come to respect and appreciate the results.\n\n\nAnother concern is that some teams may have legitimate, long spells between design sessions. The designer will need to step in and refresh the team, but it should be a gentle shadow during the sprint. The team really needs to own the sprint. \n\n\nA designer who gets the entire organization to adopt sound design methodology is now free to orchestrate a larger, cohesive vision.", 
            "title": "Teach, Don't Lead"
        }, 
        {
            "location": "/design/teach/#teach-dont-lead", 
            "text": "Design happens at all levels of the product development process. Great designers realize they make a bigger impact when they teach the entire organization good design methodology.   Our experience is that developer team uptake for design methodology is uneven. Often the resistant teams don't understand the design process value because it seems simplistic or superfluous to coding and construction. Teams like this typically feel more comfortable banging out user stories or specifications. While true they can make the code match these stores well, perhaps in pleasing ways, the resulting work may not address need, or misses that \"a-ha\" experience where you understand at an entirely different level. These teams are almost never hostile about this, so you can get them to begrudgingly change their methodology \"this one time.\" They might complain about it before and during, but often they'll look back and think, \"Wow, we would never have gotten here in the traditional methodology.\" That doesn't mean you won't have to drag them kicking and scratching into more design sprints, but they will come to respect and appreciate the results.  Another concern is that some teams may have legitimate, long spells between design sessions. The designer will need to step in and refresh the team, but it should be a gentle shadow during the sprint. The team really needs to own the sprint.   A designer who gets the entire organization to adopt sound design methodology is now free to orchestrate a larger, cohesive vision.", 
            "title": "Teach, Don't Lead"
        }, 
        {
            "location": "/design/testable/", 
            "text": "What's Testable?\n\n\nWhen you start a new design, first look at your design stories to figure out what's testable about the design. Record this in a list that you can review during the test creation process. Not everything you want to test derives from the stories - often we know to perform tests based on experience. Add these \"expert\" tests to the list as well. As you design the object and create the manufacturing artifacts, you should verify that you accommodated each test from your starting list\n\n\nAutomated Monkey Testing (AMT)\n\n\nWe discuss AMT elsewhere, but generally, design changes can have unintended consequences that you might not be easy to spot in any one design revision. We once had a situation where one of our EEs accidentally changed the net type for differentially driven bus (RS485). Each individual device tested OK, but when put into a chain close to the rated communication speed and bus length, the devices began to glitch. This test wasn't in our AMT at the time, so unfortunately the device went to the CMS for first articles before we discovered the problem. The goal is to use AMT to test your devices as close to Real World as possible.\n\n\n\n\nThe goal should be to capture as many of these tests in automated processes as possible.\n\n\n\n\nIdeas for Testing\n\n\nThe following lists should jog your memory of the types of things you should test. \n\n\n(Likely the your complete list will be longer than this.)\n\n\nEE\n\n\nThe kinds of things that are testable in any EE design might include:\n\n\n\n\nInput Power Range\n\n\nInput Power Transients\n\n\nOutput Power Load\n\n\nCurrent Draw in All Modes: Active, Standby, Sleep\n\n\nBattery Life, Charge Cycles/Performance\n\n\nSMPS Output Side DC Voltage Ripple\n\n\nSMPS Performance around Extreme Power Conditions (Input, Load, Transients, Battery, etc.)\n\n\nGround Loops, Faults\n\n\nData Bus Integrity, Stability, Impedance Match (I2C, SPI, UART, RS485, GPIO)\n\n\nI/O Ports Ground Isolation Protection (Body Diode, Etc. As Needed)\n\n\nI/O Port Mechanical Strength (Bosses as needed\n\n\nFirmware Storage Banks, Special Values\n\n\nImmutable Flash Parameters\n\n\nClocks (Crystals, Oscillators, Derived Clocks, Bus Clocks)\n\n\nSwitches, Buttons\n\n\nIR/Proximity Sensors\n\n\nEM Noise Generation (Incl Harmonics)\n\n\nDisplays, Indicator LEDs\n\n\nRF Sensitivity (@ Nominal Freq), Stability, Radiated Power\n\n\nRegulatory Certifications (UL, CE, FCC/IC)\n\n\n\n\nMechanicals\n\n\n\n\nMaterial Durability\n\n\nMachined, Molded, Printed Parts Durability\n\n\nConnector Protections (Strength, Strain Relief, Bend Radii)\n\n\nDisplay Durability (Scratch/Break Avoidance Measures/Resistance)\n\n\nIP rating (Dust, Moisture, Water, Cold, Heat)\n\n\nAssembled Device Strength (Drop, Rubber Mallet, and Penetration Tests)\n\n\nMount Strength Test\n\n\nCycles Survivability (Levers, Switches, Buttons, Knobs, Rotating Parts, Doors, Touch Sensors)\n\n\n\n\nUser Experience\n\n\n\n\nDisplay Readability\n\n\nRF Performance (WiFi, BTLE, 802.15.4)\n\n\nLook, Fit, and Finish\n\n\nResistance oo, or Acceptance of, Marring, Wear or Blemishes\n\n\nOn-boarding\n\n\nReset or Recovery from Weird Modalities\n\n\nSatisfies Design Stories\n\n\nPartial or Complete Solution to Essential User Task", 
            "title": "What's Testable?"
        }, 
        {
            "location": "/design/testable/#whats-testable", 
            "text": "When you start a new design, first look at your design stories to figure out what's testable about the design. Record this in a list that you can review during the test creation process. Not everything you want to test derives from the stories - often we know to perform tests based on experience. Add these \"expert\" tests to the list as well. As you design the object and create the manufacturing artifacts, you should verify that you accommodated each test from your starting list", 
            "title": "What's Testable?"
        }, 
        {
            "location": "/design/testable/#automated-monkey-testing-amt", 
            "text": "We discuss AMT elsewhere, but generally, design changes can have unintended consequences that you might not be easy to spot in any one design revision. We once had a situation where one of our EEs accidentally changed the net type for differentially driven bus (RS485). Each individual device tested OK, but when put into a chain close to the rated communication speed and bus length, the devices began to glitch. This test wasn't in our AMT at the time, so unfortunately the device went to the CMS for first articles before we discovered the problem. The goal is to use AMT to test your devices as close to Real World as possible.   The goal should be to capture as many of these tests in automated processes as possible.", 
            "title": "Automated Monkey Testing (AMT)"
        }, 
        {
            "location": "/design/testable/#ideas-for-testing", 
            "text": "The following lists should jog your memory of the types of things you should test.   (Likely the your complete list will be longer than this.)", 
            "title": "Ideas for Testing"
        }, 
        {
            "location": "/design/testable/#ee", 
            "text": "The kinds of things that are testable in any EE design might include:   Input Power Range  Input Power Transients  Output Power Load  Current Draw in All Modes: Active, Standby, Sleep  Battery Life, Charge Cycles/Performance  SMPS Output Side DC Voltage Ripple  SMPS Performance around Extreme Power Conditions (Input, Load, Transients, Battery, etc.)  Ground Loops, Faults  Data Bus Integrity, Stability, Impedance Match (I2C, SPI, UART, RS485, GPIO)  I/O Ports Ground Isolation Protection (Body Diode, Etc. As Needed)  I/O Port Mechanical Strength (Bosses as needed  Firmware Storage Banks, Special Values  Immutable Flash Parameters  Clocks (Crystals, Oscillators, Derived Clocks, Bus Clocks)  Switches, Buttons  IR/Proximity Sensors  EM Noise Generation (Incl Harmonics)  Displays, Indicator LEDs  RF Sensitivity (@ Nominal Freq), Stability, Radiated Power  Regulatory Certifications (UL, CE, FCC/IC)", 
            "title": "EE"
        }, 
        {
            "location": "/design/testable/#mechanicals", 
            "text": "Material Durability  Machined, Molded, Printed Parts Durability  Connector Protections (Strength, Strain Relief, Bend Radii)  Display Durability (Scratch/Break Avoidance Measures/Resistance)  IP rating (Dust, Moisture, Water, Cold, Heat)  Assembled Device Strength (Drop, Rubber Mallet, and Penetration Tests)  Mount Strength Test  Cycles Survivability (Levers, Switches, Buttons, Knobs, Rotating Parts, Doors, Touch Sensors)", 
            "title": "Mechanicals"
        }, 
        {
            "location": "/design/testable/#user-experience", 
            "text": "Display Readability  RF Performance (WiFi, BTLE, 802.15.4)  Look, Fit, and Finish  Resistance oo, or Acceptance of, Marring, Wear or Blemishes  On-boarding  Reset or Recovery from Weird Modalities  Satisfies Design Stories  Partial or Complete Solution to Essential User Task", 
            "title": "User Experience"
        }, 
        {
            "location": "/design/ethno_study/", 
            "text": "Ethnographic Study\n\n\nThe best way to understand users is to meet them in their native environment and observe how they behave and interact. The goal for a good designer should be  to capture \nqualitative\n data about the users at the site. When you understand the users' culture and pair that with the essential user task, you end up with a deeper understanding of how they inhabit their work.\n\n\nA good ethnographic study will have the following characteristics:\n\n\n\n\nIt takes place in the field where the users work\n\n\nThe primary data collection method is observation\n\n\nThe research team should interview users to clarify observations\n\n\nThe research team should capture artifacts, including the context of their use\n\n\n\n\nThe final product should be a narrative report that includes observations, interviews, photos/videos and artifacts - all organized in a way reveals the qualitative nature of the site and users.\n\n\nWikipedia provides a good starting point for ideas about how and why to conduct an ethnographic study: \nEthnographic Study Features\n\n\nAn excerpt of that article includes the follow guidelines:\n\n\n\n\nInvolves investigation of very few cases, maybe just one case, in detail.\n\n\nOften involves working with primarily unconstructed data. This data had not been coded at the point of data collection in terms of a closed set of analytic categories.\n\n\nEmphasises on exploring social phenomena rather than testing hypotheses.\n\n\nData analysis involves interpretation of the functions and meanings of human actions. The product of this is mainly verbal explanations, where statistical analysis and quantification play a subordinate role.\n\n\nMethodological discussions focus more on questions about how to report findings in the field than on methods of data collection and interpretation.\n\n\nEthnographies focus on describing the culture of a group in very detailed and complex manner. The ethnography can be of the entire group or a subpart of it.\n\n\nIt involves engaging in extensive field work where data collection is mainly by interviews, symbols, artefacts, observations, and many other sources of data.\n\n\nThe researcher in ethnography type of research, looks for patterns of the groups mental activities, that is their ideas and beliefs expressed through language or other activities, and how they behave in their groups as expressed through their actions that the researcher observed.", 
            "title": "Ethnographic Study"
        }, 
        {
            "location": "/design/ethno_study/#ethnographic-study", 
            "text": "The best way to understand users is to meet them in their native environment and observe how they behave and interact. The goal for a good designer should be  to capture  qualitative  data about the users at the site. When you understand the users' culture and pair that with the essential user task, you end up with a deeper understanding of how they inhabit their work.  A good ethnographic study will have the following characteristics:   It takes place in the field where the users work  The primary data collection method is observation  The research team should interview users to clarify observations  The research team should capture artifacts, including the context of their use   The final product should be a narrative report that includes observations, interviews, photos/videos and artifacts - all organized in a way reveals the qualitative nature of the site and users.  Wikipedia provides a good starting point for ideas about how and why to conduct an ethnographic study:  Ethnographic Study Features  An excerpt of that article includes the follow guidelines:   Involves investigation of very few cases, maybe just one case, in detail.  Often involves working with primarily unconstructed data. This data had not been coded at the point of data collection in terms of a closed set of analytic categories.  Emphasises on exploring social phenomena rather than testing hypotheses.  Data analysis involves interpretation of the functions and meanings of human actions. The product of this is mainly verbal explanations, where statistical analysis and quantification play a subordinate role.  Methodological discussions focus more on questions about how to report findings in the field than on methods of data collection and interpretation.  Ethnographies focus on describing the culture of a group in very detailed and complex manner. The ethnography can be of the entire group or a subpart of it.  It involves engaging in extensive field work where data collection is mainly by interviews, symbols, artefacts, observations, and many other sources of data.  The researcher in ethnography type of research, looks for patterns of the groups mental activities, that is their ideas and beliefs expressed through language or other activities, and how they behave in their groups as expressed through their actions that the researcher observed.", 
            "title": "Ethnographic Study"
        }, 
        {
            "location": "/design/sprint/", 
            "text": "Design Sprints\n\n\nProbably the Gold Standard for design sprints is Ideo's \nDesign Kit: The Field Guide to Human-Centered Design\n. The problem is that these are large, complex beasts and small companies generally won't have the resources to conduct them. (If you do, then go for it!)\n\n\nGoogle Ventures Design Sprint (GVDS)\n\n\nA derivative of this process is the \nGoogle Ventures Design Sprint\n. This process follows a five-day arc led by a designer/facilitator and commanded by a product owner.\n\n\n\n\n\n\n\n\nStage\n\n\nActivity\n\n\nTheme\n\n\n\n\n\n\n\n\n\n\nPre-Sprint\n\n\nSet the stage\n\n\nPrep\n\n\n\n\n\n\nMonday\n\n\nCreate a framework for the sprint\n\n\nUnderstand\n\n\n\n\n\n\nTuesday\n\n\nSummarize existing solutions, sketch new solutions\n\n\nDiverge\n\n\n\n\n\n\nWednesday\n\n\nCritique new solutions, narrow the focus, storyboard one\n\n\nConverge\n\n\n\n\n\n\nThursday:\n\n\nCreate a works-like/looks-like prototype (Keynote, sketches, foam, paper, etc.)\n\n\nPrototype\n\n\n\n\n\n\nFriday\n\n\nTest the prototype with real users.\n\n\nTest \n Learn\n\n\n\n\n\n\n\n\nThe good thing about the GVDS process is that it's not democratic. The product owner ultimately makes the call on decisions, and that's good because it tends to focus the effort on fewer ideas of better quality.\n\n\nEveryday Sprints\n\n\nFor a small company it might be hard to find the resources entire teams to regularly spend a week to run GVDS process. Since there will be tons of continuous design choices along the entire product gradient, you want to make sure the most important decisions come from a careful, measured process. For this reason we invented the \"Everyday Sprint\" that teams could run regularly with low burden. Typically we follow these steps:\n\n\n\n\nChoose one or two central tasks that need design thought.\n\n\nOne or more people conduct an ethnographic study with these central questions in mind (a half-day usually).\n\n\nThe sprint leader selects members to join the design sprint, and shares the \"cooked\" study data and schedules 60-90 minutes to run the sprint.\n\n\nThe day before, the sprint leader secures materials for the sprint (stickies, pencils, erasers, timers, and the room).\n\n\nJust before the sprint, the leader preps the room:\n\n\nWrite the essential user task on the whiteboard.\n\n\nWrite the 1-2 design sprint central questions.\n\n\nPartition the board into three design story classifications columns: essential, uncertain and ideal.\n\n\nSharpens all the pencils, arranges the materials and chooses the teams.\n\n\n\n\n\n\nWorking in teams of 2-3 people, you allow 30 minutes for each team to rapidly and simultaneously create design stories that address the selected central question on the board.\n\n\nAt the end of 30 minutes the teams work together to read their stories aloud and the group votes if the story is \"essential, uncertain or ideal.\"\n\n\nThe sprint leader sticks the voted stories in the correct column, allowing for (near) duplicates by stacking the duplicates.\n\n\nRepeat this process for all the central questions on the board (generally you do not want more than two).\n\n\n\n\nAt the end of the design sprint, the sprint leader and product (or feature) owner should have a complete set of design stories categorized by how essential they are to the user process under consideration. These stories get entered into the tracking system (e.g. Jira) for the development team to slot into developer sprints. Because you've taught the development team good design practices, it's both safe and rewarding to allow them to run development from the design stories alone. (Most developer teams will likely first generate user stories and detailed specifications from the design stories.) The good thing about this process is that it's not prescriptive - design stories states what's needful and gives the developer wide intellectual latitude to come up with the best solution.", 
            "title": "Design Sprint"
        }, 
        {
            "location": "/design/sprint/#design-sprints", 
            "text": "Probably the Gold Standard for design sprints is Ideo's  Design Kit: The Field Guide to Human-Centered Design . The problem is that these are large, complex beasts and small companies generally won't have the resources to conduct them. (If you do, then go for it!)", 
            "title": "Design Sprints"
        }, 
        {
            "location": "/design/sprint/#google-ventures-design-sprint-gvds", 
            "text": "A derivative of this process is the  Google Ventures Design Sprint . This process follows a five-day arc led by a designer/facilitator and commanded by a product owner.     Stage  Activity  Theme      Pre-Sprint  Set the stage  Prep    Monday  Create a framework for the sprint  Understand    Tuesday  Summarize existing solutions, sketch new solutions  Diverge    Wednesday  Critique new solutions, narrow the focus, storyboard one  Converge    Thursday:  Create a works-like/looks-like prototype (Keynote, sketches, foam, paper, etc.)  Prototype    Friday  Test the prototype with real users.  Test   Learn     The good thing about the GVDS process is that it's not democratic. The product owner ultimately makes the call on decisions, and that's good because it tends to focus the effort on fewer ideas of better quality.", 
            "title": "Google Ventures Design Sprint (GVDS)"
        }, 
        {
            "location": "/design/sprint/#everyday-sprints", 
            "text": "For a small company it might be hard to find the resources entire teams to regularly spend a week to run GVDS process. Since there will be tons of continuous design choices along the entire product gradient, you want to make sure the most important decisions come from a careful, measured process. For this reason we invented the \"Everyday Sprint\" that teams could run regularly with low burden. Typically we follow these steps:   Choose one or two central tasks that need design thought.  One or more people conduct an ethnographic study with these central questions in mind (a half-day usually).  The sprint leader selects members to join the design sprint, and shares the \"cooked\" study data and schedules 60-90 minutes to run the sprint.  The day before, the sprint leader secures materials for the sprint (stickies, pencils, erasers, timers, and the room).  Just before the sprint, the leader preps the room:  Write the essential user task on the whiteboard.  Write the 1-2 design sprint central questions.  Partition the board into three design story classifications columns: essential, uncertain and ideal.  Sharpens all the pencils, arranges the materials and chooses the teams.    Working in teams of 2-3 people, you allow 30 minutes for each team to rapidly and simultaneously create design stories that address the selected central question on the board.  At the end of 30 minutes the teams work together to read their stories aloud and the group votes if the story is \"essential, uncertain or ideal.\"  The sprint leader sticks the voted stories in the correct column, allowing for (near) duplicates by stacking the duplicates.  Repeat this process for all the central questions on the board (generally you do not want more than two).   At the end of the design sprint, the sprint leader and product (or feature) owner should have a complete set of design stories categorized by how essential they are to the user process under consideration. These stories get entered into the tracking system (e.g. Jira) for the development team to slot into developer sprints. Because you've taught the development team good design practices, it's both safe and rewarding to allow them to run development from the design stories alone. (Most developer teams will likely first generate user stories and detailed specifications from the design stories.) The good thing about this process is that it's not prescriptive - design stories states what's needful and gives the developer wide intellectual latitude to come up with the best solution.", 
            "title": "Everyday Sprints"
        }, 
        {
            "location": "/hardware/top_level/", 
            "text": "The purpose of this document is to describe the process for a major revision or creating a new object. The top level party should hold on to this document and use it to organized the development of the object. During the process please write on the document improvements and alterations.\n\n\nStep 0: Kick-off Development Cycle\n\n\nThe kick-off is essential to inform everyone that the object is now in-flight for a development cycle.\n\n\n\n\nSend an announce email to development group that includes the PLM narrative of the object\n\n\nSchedule a kick-off meeting and invite whomever will be involved\n\n\nCreate a top level Github repository if necessary\n\n\nCreate a JIRA epic for the object \u201ce.g. CHECON- New Display\u201d\n\n\nPrint this document\n\n\nFill out the top portion\n\n\nTop level party should hold on to this document, check, and red pen as the project moves\n\n\n\n\nStep 1: Kick-off Meeting\n\n\nThe purpose of this step is to identify and start coordinating development of all sub and co components of this top level object.\n\n\n\n\nGo over design stories that this object will accomplish\n\n\nDefine the sub-components and co-components of the top level object\n\n\nExamples include:\n\n\nPCB/A\n\n\nMechanicals\n\n\nFirmware\n\n\n\n\n\n\nFor sub-components and co-components that will need development for this project\n\n\nAssign top level parties to each component who will run those development cycles\n\n\n\n\n\n\n\n\n\n\nGo to hardware release page and update the relevant information for the top level device, relevant sub-components, and co-components \n\n\n\n\nStep 2: Sketch Session\n\n\nA sketch sessions should be conducted for mid to large-sized projects or problems where the requirements and solutions are still ambiguous. Sessions include the lead stakeholder (client), product owner, domain experts, designers and facilitators. The group works together on diverging ideas around the problem space, then pair the ideas down to ones that are actionable.\n\n\nIf the object owners decide a sketch session would be helpful have a sketch session. If the problem and/or solution is ambiguous then a sketch session is recommended - otherwise if the solution is unambiguous probably not needed.\n\n\nStep 3: Define a six digit alpha code\n\n\nIf necessary define a new six digit alpha code.\nPart numbering scheme will probably change\ncopy from other document\n\n\nStep 4: Product Lifecycle Update / Testability\n\n\nEvery finished goods object we produce includes an informal product lifecycle narrative document. The goals of the object should be reflected in the testability of the object. For each goal we should have at least one test. Each time we start a design process loop on a new or existing object we need to update the PLM narrative with answers to questions similar to:\n\n\n\n\nWhat are the goals of this object?\n\n\nWhat is testable about the object?\n\n\n\n\nStep 7: Coordinate the sub-components and co-components development\n\n\nThis is the actual development of all the sub and co components of the top level device. This step could take a very long time depending on the scope of the project. During this time the top level party of this device is responsible for fostering communication between all the sub and co component top level parties so development is as seamless as possible.\n\n\n\n\nHave regular meetings with at least all of the sub-component and co-component top level parties to discuss the state of this top level object\n\n\nThe top level party of this object should be made aware of any changes the sub and co components development path so they can be a single point of information (fostering communication)\n\n\nMake sure sub-components and co-components are working towards accomplishing the design stories\n\n\n\n\nStep 8: Verify all released Sub-components and Co-Components\n\n\nThe purpose of this step is to verify that the top level party of this object has all the parts they need to do a top level release.\n\n\n\n\nWhen all the sub-components and co-components have finished their development cycles have a meeting with all the sub-component top level parties and verify the finished top level object.\n\n\nVerify that all the sub and co components have have released all the parts required to do a top level object\n\n\nDid the related components actually follow the release process?\n\n\nAre they actually released? \n\n\nIdentify any additional parts that need to be created for top level object release\n\n\nCreate a finished goods checklist\n\n\nCombine all the sub and co components\n\n\n\n\nStep 9: Create the Production Package\n\n\n\n\nCreate the appropriate production package for this device. In general the production package should include at least a BOM and a ECO - it may also include testing information and packaging information.\n\n\nMake sure that the file names in the repository match the names in the BOM\n\n\nTo the extent that is possible the editable versions of the documents should also be put in the Github repository. (e.g. The editable document used to produce a PDF should be also included)\n\n\n\n\nStep 10: Release Top Level\n\n\nWe need a barebones checklist - ask calla\n\n\n\n\nAdd all finished files to Github repository for this object\n\n\nRelease the object by tagging the commit\n\n\nAnnounce the release to oakland-staff@codeshelf.com \n\n\nUpdate the release status page\n\n\n\n\nStep 11: Post Release Review (ProdMgr)\n\n\n\n\nReview the release process with the Engineer\n\n\nChange the release process document as needed\n\n\nChange the release checklists as needed", 
            "title": "Top-Level Object Dev"
        }, 
        {
            "location": "/hardware/top_level/#step-0-kick-off-development-cycle", 
            "text": "The kick-off is essential to inform everyone that the object is now in-flight for a development cycle.   Send an announce email to development group that includes the PLM narrative of the object  Schedule a kick-off meeting and invite whomever will be involved  Create a top level Github repository if necessary  Create a JIRA epic for the object \u201ce.g. CHECON- New Display\u201d  Print this document  Fill out the top portion  Top level party should hold on to this document, check, and red pen as the project moves", 
            "title": "Step 0: Kick-off Development Cycle"
        }, 
        {
            "location": "/hardware/top_level/#step-1-kick-off-meeting", 
            "text": "The purpose of this step is to identify and start coordinating development of all sub and co components of this top level object.   Go over design stories that this object will accomplish  Define the sub-components and co-components of the top level object  Examples include:  PCB/A  Mechanicals  Firmware    For sub-components and co-components that will need development for this project  Assign top level parties to each component who will run those development cycles      Go to hardware release page and update the relevant information for the top level device, relevant sub-components, and co-components", 
            "title": "Step 1: Kick-off Meeting"
        }, 
        {
            "location": "/hardware/top_level/#step-2-sketch-session", 
            "text": "A sketch sessions should be conducted for mid to large-sized projects or problems where the requirements and solutions are still ambiguous. Sessions include the lead stakeholder (client), product owner, domain experts, designers and facilitators. The group works together on diverging ideas around the problem space, then pair the ideas down to ones that are actionable.  If the object owners decide a sketch session would be helpful have a sketch session. If the problem and/or solution is ambiguous then a sketch session is recommended - otherwise if the solution is unambiguous probably not needed.", 
            "title": "Step 2: Sketch Session"
        }, 
        {
            "location": "/hardware/top_level/#step-3-define-a-six-digit-alpha-code", 
            "text": "If necessary define a new six digit alpha code.\nPart numbering scheme will probably change\ncopy from other document", 
            "title": "Step 3: Define a six digit alpha code"
        }, 
        {
            "location": "/hardware/top_level/#step-4-product-lifecycle-update-testability", 
            "text": "Every finished goods object we produce includes an informal product lifecycle narrative document. The goals of the object should be reflected in the testability of the object. For each goal we should have at least one test. Each time we start a design process loop on a new or existing object we need to update the PLM narrative with answers to questions similar to:   What are the goals of this object?  What is testable about the object?", 
            "title": "Step 4: Product Lifecycle Update / Testability"
        }, 
        {
            "location": "/hardware/top_level/#step-7-coordinate-the-sub-components-and-co-components-development", 
            "text": "This is the actual development of all the sub and co components of the top level device. This step could take a very long time depending on the scope of the project. During this time the top level party of this device is responsible for fostering communication between all the sub and co component top level parties so development is as seamless as possible.   Have regular meetings with at least all of the sub-component and co-component top level parties to discuss the state of this top level object  The top level party of this object should be made aware of any changes the sub and co components development path so they can be a single point of information (fostering communication)  Make sure sub-components and co-components are working towards accomplishing the design stories", 
            "title": "Step 7: Coordinate the sub-components and co-components development"
        }, 
        {
            "location": "/hardware/top_level/#step-8-verify-all-released-sub-components-and-co-components", 
            "text": "The purpose of this step is to verify that the top level party of this object has all the parts they need to do a top level release.   When all the sub-components and co-components have finished their development cycles have a meeting with all the sub-component top level parties and verify the finished top level object.  Verify that all the sub and co components have have released all the parts required to do a top level object  Did the related components actually follow the release process?  Are they actually released?   Identify any additional parts that need to be created for top level object release  Create a finished goods checklist  Combine all the sub and co components", 
            "title": "Step 8: Verify all released Sub-components and Co-Components"
        }, 
        {
            "location": "/hardware/top_level/#step-9-create-the-production-package", 
            "text": "Create the appropriate production package for this device. In general the production package should include at least a BOM and a ECO - it may also include testing information and packaging information.  Make sure that the file names in the repository match the names in the BOM  To the extent that is possible the editable versions of the documents should also be put in the Github repository. (e.g. The editable document used to produce a PDF should be also included)", 
            "title": "Step 9: Create the Production Package"
        }, 
        {
            "location": "/hardware/top_level/#step-10-release-top-level", 
            "text": "We need a barebones checklist - ask calla   Add all finished files to Github repository for this object  Release the object by tagging the commit  Announce the release to oakland-staff@codeshelf.com   Update the release status page", 
            "title": "Step 10: Release Top Level"
        }, 
        {
            "location": "/hardware/top_level/#step-11-post-release-review-prodmgr", 
            "text": "Review the release process with the Engineer  Change the release process document as needed  Change the release checklists as needed", 
            "title": "Step 11: Post Release Review (ProdMgr)"
        }, 
        {
            "location": "/hardware/pcba/", 
            "text": "Step 0: Kick-off Development Cycle\n\n\nThe kick-off is essential to inform everyone that the object is now in-flight for another development cycle.  The steps for kick-off are:\n\n\n\n\nNominate a \"person in charge\" to manage this object through the process.\n\n\nSend an announce email to the development group.\n\n\nSchedule kick-off meeting\n\n\nCreate a JIRA epic for the object.  E.g. \"CHECON-PCBA-New Display\"\n\n\nCreate relevant JIRA stories\n\n\nGo to the hardware release page and update the relevant information for the device and any relevant sub-component projects: Current and Planned Hardware Releases\n\n\nPrint this page and make sure it follows the device through the development cycle.\n\n\nRead with a pen!\n\n\n\n\nStep 1: Create Design Artifacts (Engineer)\n\n\nThe first step to the design and manufacture of a PCB/A is to create all of the relevant design and production artifacts (files).\nEagleCAD schematic\n\n\nThe first step for any new design is to capture it as an EagleCAD schematic.  This is the architectural design document of the circuit.  The schematic contains all of the parts in the design and is the central source of the BOM for any design by capturing component annotations.  (Later we'll get these annotations from Octopart).  The format for naming our designs is to use a six-character code like POSCTL and then the design files will be POSCTL.sch and POSCTL.brd, etc.\nEagleCAD layout\n\n\nOnce the schematic is complete we layout the physical board in what will become the final PCB.  This layout includes the board stack-up, because each layer of the stackup is a layer in EagleCAD.  Once the layout is complete, EagleCAD can generate the Gerber files, Excellon Drill files, Centroid files and BOM for the design that are suitable to manufacture the board to completion.  For this reason any version of the EagleCAD file stored in git should always be able to generate the master files needed to manufacture the part.\n\n\nStep 2: Run ERC / DRC checks against manufacturer capabilities file\n\n\nEagleCAD has the ability to create a design rules check file, and it should match your manufacturer's capabilities for the kind of board you want to make. It's a good idea to have both a \"standard\" and \"advanced\" DRC file. The standard file should be for everything that's easy to run (and somewhat cheap). The advanced file should be for when you have tight tolerances, for example when you need narrow vias. Because we are able to cut our own PCBs on a mill, we generally use \"standard\" to match the mill's capability since it's usually much looser than the \"low cost\" option at most fab houses. Advanced designs are usually beyond the capability of our mill, or require the machine operator to make special allowances for end mills. (Generally we do not run 0.025mm end mills because they break easily and are somewhat finicky.)\n\n\nStep 3: Create a Prototype Release\n\n\nTo validate the design we produce an in-house prototype.  This is a somewhat lightweight process where the engineer commits the Eagle schematic and board files to git.  This is not a tagged release, because there may be many of them.  \n\n\n\n\nThe engineer commits the Eagle schematic and board files.\n\n\nThe engineer creates a PCB blank template and mails it to the prototype shop manager.\n\n\nThe engineer creates a prototype BOM and mails is to the prototype shop manager.\n\n\nThe prototype shop manager schedules the board build and coordinates with the production manager to acquire any missing BOM components.\n\n\nThe prototype shop converts the Eagle board file into gcode using the \"board blank\" template.\n\n\nThe prototype shop cuts the PCB.\n\n\nThe prototype shop assembles the PCB, that potentially includes new enclosures and mechanicals, and delivers it to the HWTE.\n\n\n\n\nWhen boards cannot be prototyped in-house:\n\n\n\n\nEmail production files to the ProdMgr along with requested turnaround time and quantities. \n\n\nRFQs will be placed.\n\n\nPrototypes will be made at a CMS.\n\n\n\n\nAny sub-assembly which versions separately can be released (to prototype or production) without releasing the other components of the assembly.\n\n\nStep 4: Test the Prototype\n\n\nThe HWTE runs all of the relevant tests to validate that the prototype is correct.\n\n\n\n\nProgram and test the device in the manufacturing/test jig.\n\n\nRun the MAT, if possible.\n\n\nRun the device in the AMT (units tests and E2E tests)\n\n\n\n\nIf the HWTE approves the device for production, then proceed to step 4, otherwise go back to step 1.\n\n\nStep 5: Create the Pre-Release/Release Package (Engineer)\n\n\nThere are steps to manufacturing a complete PCB/A that the EagleCAD files do not capture.  These include how to resolve ambiguity in the silkscreen (when parts are very close together), any special instructions, UL documentation, PCB stackup notes such as fiberglass type (eg. FR4, copper weights, etc.).\n\n\n\n\nNote on fab files from the CMS:\n\n\nSpecify board material, surface finish (pads), electrical (nickel, gold), mask, thickness, already have a drill file, net list testing by fab shop is required. Controlled impedance is not standard \u2013 if you don\u2019t want it, don\u2019t include in notes. Include UL related notes for agency approvals \u2013 it\u2019s standard for fab shops. We should have UL in drawings and require it in boards. Need for UL has to do with plugging into the wall and certifying for safety. Also, there are specific components that need to be UL rated. All components are UL certified. If we don\u2019t specify, we don\u2019t have a document trail and can get dinged if anybody asks. Term is something about UL flammability rating as an etch on the board.\n\n\n\n\nFor a PCB/A manufacturing run, the release package contains the following documents.  The file names derive from the base product ID, e.g. POSCON.  From that all PCB/A files end in POSCON.PCB.\n\n\n\n\n\n\n\n\nFile\n\n\nExample\n\n\nProd/Design Folder\n\n\n\n\n\n\n\n\n\n\nSchematic\n\n\nPOSCON.PCB.sch\n\n\nDesign\n\n\n\n\n\n\nBoard\n\n\nPOSCON.PCB.brd\n\n\nDesign\n\n\n\n\n\n\nBoard Outline\n\n\nPOSCON.PCB.FAB\n\n\nProduction\\Gerber\n\n\n\n\n\n\nTop Copper\n\n\nPOSCON.PCB.LAY1\n\n\nProduction\\Gerber\n\n\n\n\n\n\nInner Copper 1\n\n\nPOSCON.PCB.LAY2\n\n\nProduction\\Gerber\n\n\n\n\n\n\nInner Copper 2\n\n\nPOSCON.PCB.LAY3\n\n\nProduction\\Gerber\n\n\n\n\n\n\nBottom Copper\n\n\nPOSCON.PCB.LAY4\n\n\nProduction\\Gerber\n\n\n\n\n\n\nBottom Soldermask\n\n\nPOSCON.PCB.SMB\n\n\nProduction\\Gerber\n\n\n\n\n\n\nTop Soldermask\n\n\nPOSCON.PCB.SMT\n\n\nProduction\\Gerber\n\n\n\n\n\n\nBottom Solderpaste\n\n\nPOSCON.PCB.SPB\n\n\nProduction\\Gerber\n\n\n\n\n\n\nTop Solderpaste\n\n\nPOSCON.PCB.SPT\n\n\nProduction\\Gerber\n\n\n\n\n\n\nTop Silkscreen\n\n\nPOSCON.PCB.SST\n\n\nProduction\\Gerber\n\n\n\n\n\n\nBottom Silkscreen\n\n\nPOSCON.PCB.SSB\n\n\nProduction\\Gerber\n\n\n\n\n\n\nExcellon Drill File\n\n\nPOSCON.PCB.drd\n\n\nProduction\\Gerber\n\n\n\n\n\n\nCentroid File\n\n\nPOSCON.PCB_centroid.csv\n\n\nProduction\\Gerber\n\n\n\n\n\n\nBOM\n\n\nPOSCON.PCB.BOM.xlsx\n\n\nProduction\n\n\n\n\n\n\nFabrication Notes\n\n\nPOSCON.PCB.FAB.txt\n\n\nProduction\n\n\n\n\n\n\nAssembly File\n\n\nPOSCON.PCB.ASSY.txt\n\n\nProduction\n\n\n\n\n\n\nTest File\n\n\nPOSCON.PCB.TEST.txt\n\n\nProduction\n\n\n\n\n\n\nECO\n\n\nPOSCON.PCB.ECO.xlsx\n\n\nProduction\n\n\n\n\n\n\n\n\nStep 6: Commit the Pre-Release Package to Git (Engineer)\n\n\n\n\nCommit the above files to github.\n\n\nTag the commit ID (the git commit SHA1) as a release candidate (RC).  E.g. V1.1-RC1\n\n\n\n\nStep 7: Release Checklist (Engineer, HWTE and ProdMgr)\n\n\nAll files in the Release Candidate repository must be checked against a printed Release Checklist and a printed copy of this document for completeness and accuracy. \n\n\nChecklist: Codeshelf EE Design Process and Release\n\n\nStep 8: Release Tag (Engineer)\n\n\nThis step includes a complete review of the design and BOM. When the checklist is passed, the Git repository will be tagged as a release.\n\n\nStep 9: Arena (ProdMgr)\n\n\nAt this point we have an object that is manufacturable and if it passes all pre-production tests it will never, ever change again.  For this reason it is now safe to enter all pre-release package files into the Arena database before continuing the release process.  Reference the Arena process document at: \n\n\nStep 10: Build First Articles (ProdMgr)\n\n\nOnce a part releases prior to manufacture we send the release package to the CMS for a request to quote/manufacture.   The CMS is not allowed to make any changes to this package, including vendor or part substitutions, without first looping back to Codeshelf to obtain an ECO.  The most common case is that the CMS requests permission to swap parts or vendors for passives.  When we receive the ECR from the CMS, we review it and decide if we will approve the change.  If we agree to approve the change then we capture that change into the appropriate documents (BOM, ECO, etc.) and re-release the product with these changes.\n\n\nWhen the device comes back from the fab, it gets assembled by the prototype shop (if not already assembled by the outside CMS). \n\n\nCheck whether CMS has any modifications to the design. If so, the design needs to be revised and re-versioned. \n\n\nStep 11: Test and Validate First Articles (HWTE)\n\n\n\n\nProgram and test the device in the manufacturing/test jig.\n\n\nRun the MAT, if possible.\n\n\nRun the device in the AMT (units tests and E2E tests)\n\n\n\n\nIf approved for production then the proceed to step 12, otherwise proceed to step 1.\n\n\nStep 12: Release Announcement (ProdMgr)\n\n\nIf the First Articles are proven good, a release announcement will be issued, the Current and Planned Hardware Releases document will be updated, and the item will be cleared for further production.\n\n\nStep 13: Post Release Review (ProdMgr)\n\n\n\n\nReview the release process with the Engineer\n\n\nChange the release process document as needed\n\n\nChange the release checklists as needed", 
            "title": "PCB/A Dev"
        }, 
        {
            "location": "/hardware/pcba/#step-0-kick-off-development-cycle", 
            "text": "The kick-off is essential to inform everyone that the object is now in-flight for another development cycle.  The steps for kick-off are:   Nominate a \"person in charge\" to manage this object through the process.  Send an announce email to the development group.  Schedule kick-off meeting  Create a JIRA epic for the object.  E.g. \"CHECON-PCBA-New Display\"  Create relevant JIRA stories  Go to the hardware release page and update the relevant information for the device and any relevant sub-component projects: Current and Planned Hardware Releases  Print this page and make sure it follows the device through the development cycle.  Read with a pen!", 
            "title": "Step 0: Kick-off Development Cycle"
        }, 
        {
            "location": "/hardware/pcba/#step-1-create-design-artifacts-engineer", 
            "text": "The first step to the design and manufacture of a PCB/A is to create all of the relevant design and production artifacts (files).\nEagleCAD schematic  The first step for any new design is to capture it as an EagleCAD schematic.  This is the architectural design document of the circuit.  The schematic contains all of the parts in the design and is the central source of the BOM for any design by capturing component annotations.  (Later we'll get these annotations from Octopart).  The format for naming our designs is to use a six-character code like POSCTL and then the design files will be POSCTL.sch and POSCTL.brd, etc.\nEagleCAD layout  Once the schematic is complete we layout the physical board in what will become the final PCB.  This layout includes the board stack-up, because each layer of the stackup is a layer in EagleCAD.  Once the layout is complete, EagleCAD can generate the Gerber files, Excellon Drill files, Centroid files and BOM for the design that are suitable to manufacture the board to completion.  For this reason any version of the EagleCAD file stored in git should always be able to generate the master files needed to manufacture the part.", 
            "title": "Step 1: Create Design Artifacts (Engineer)"
        }, 
        {
            "location": "/hardware/pcba/#step-2-run-erc-drc-checks-against-manufacturer-capabilities-file", 
            "text": "EagleCAD has the ability to create a design rules check file, and it should match your manufacturer's capabilities for the kind of board you want to make. It's a good idea to have both a \"standard\" and \"advanced\" DRC file. The standard file should be for everything that's easy to run (and somewhat cheap). The advanced file should be for when you have tight tolerances, for example when you need narrow vias. Because we are able to cut our own PCBs on a mill, we generally use \"standard\" to match the mill's capability since it's usually much looser than the \"low cost\" option at most fab houses. Advanced designs are usually beyond the capability of our mill, or require the machine operator to make special allowances for end mills. (Generally we do not run 0.025mm end mills because they break easily and are somewhat finicky.)", 
            "title": "Step 2: Run ERC / DRC checks against manufacturer capabilities file"
        }, 
        {
            "location": "/hardware/pcba/#step-3-create-a-prototype-release", 
            "text": "To validate the design we produce an in-house prototype.  This is a somewhat lightweight process where the engineer commits the Eagle schematic and board files to git.  This is not a tagged release, because there may be many of them.     The engineer commits the Eagle schematic and board files.  The engineer creates a PCB blank template and mails it to the prototype shop manager.  The engineer creates a prototype BOM and mails is to the prototype shop manager.  The prototype shop manager schedules the board build and coordinates with the production manager to acquire any missing BOM components.  The prototype shop converts the Eagle board file into gcode using the \"board blank\" template.  The prototype shop cuts the PCB.  The prototype shop assembles the PCB, that potentially includes new enclosures and mechanicals, and delivers it to the HWTE.   When boards cannot be prototyped in-house:   Email production files to the ProdMgr along with requested turnaround time and quantities.   RFQs will be placed.  Prototypes will be made at a CMS.   Any sub-assembly which versions separately can be released (to prototype or production) without releasing the other components of the assembly.", 
            "title": "Step 3: Create a Prototype Release"
        }, 
        {
            "location": "/hardware/pcba/#step-4-test-the-prototype", 
            "text": "The HWTE runs all of the relevant tests to validate that the prototype is correct.   Program and test the device in the manufacturing/test jig.  Run the MAT, if possible.  Run the device in the AMT (units tests and E2E tests)   If the HWTE approves the device for production, then proceed to step 4, otherwise go back to step 1.", 
            "title": "Step 4: Test the Prototype"
        }, 
        {
            "location": "/hardware/pcba/#step-5-create-the-pre-releaserelease-package-engineer", 
            "text": "There are steps to manufacturing a complete PCB/A that the EagleCAD files do not capture.  These include how to resolve ambiguity in the silkscreen (when parts are very close together), any special instructions, UL documentation, PCB stackup notes such as fiberglass type (eg. FR4, copper weights, etc.).   Note on fab files from the CMS:  Specify board material, surface finish (pads), electrical (nickel, gold), mask, thickness, already have a drill file, net list testing by fab shop is required. Controlled impedance is not standard \u2013 if you don\u2019t want it, don\u2019t include in notes. Include UL related notes for agency approvals \u2013 it\u2019s standard for fab shops. We should have UL in drawings and require it in boards. Need for UL has to do with plugging into the wall and certifying for safety. Also, there are specific components that need to be UL rated. All components are UL certified. If we don\u2019t specify, we don\u2019t have a document trail and can get dinged if anybody asks. Term is something about UL flammability rating as an etch on the board.   For a PCB/A manufacturing run, the release package contains the following documents.  The file names derive from the base product ID, e.g. POSCON.  From that all PCB/A files end in POSCON.PCB.     File  Example  Prod/Design Folder      Schematic  POSCON.PCB.sch  Design    Board  POSCON.PCB.brd  Design    Board Outline  POSCON.PCB.FAB  Production\\Gerber    Top Copper  POSCON.PCB.LAY1  Production\\Gerber    Inner Copper 1  POSCON.PCB.LAY2  Production\\Gerber    Inner Copper 2  POSCON.PCB.LAY3  Production\\Gerber    Bottom Copper  POSCON.PCB.LAY4  Production\\Gerber    Bottom Soldermask  POSCON.PCB.SMB  Production\\Gerber    Top Soldermask  POSCON.PCB.SMT  Production\\Gerber    Bottom Solderpaste  POSCON.PCB.SPB  Production\\Gerber    Top Solderpaste  POSCON.PCB.SPT  Production\\Gerber    Top Silkscreen  POSCON.PCB.SST  Production\\Gerber    Bottom Silkscreen  POSCON.PCB.SSB  Production\\Gerber    Excellon Drill File  POSCON.PCB.drd  Production\\Gerber    Centroid File  POSCON.PCB_centroid.csv  Production\\Gerber    BOM  POSCON.PCB.BOM.xlsx  Production    Fabrication Notes  POSCON.PCB.FAB.txt  Production    Assembly File  POSCON.PCB.ASSY.txt  Production    Test File  POSCON.PCB.TEST.txt  Production    ECO  POSCON.PCB.ECO.xlsx  Production", 
            "title": "Step 5: Create the Pre-Release/Release Package (Engineer)"
        }, 
        {
            "location": "/hardware/pcba/#step-6-commit-the-pre-release-package-to-git-engineer", 
            "text": "Commit the above files to github.  Tag the commit ID (the git commit SHA1) as a release candidate (RC).  E.g. V1.1-RC1", 
            "title": "Step 6: Commit the Pre-Release Package to Git (Engineer)"
        }, 
        {
            "location": "/hardware/pcba/#step-7-release-checklist-engineer-hwte-and-prodmgr", 
            "text": "All files in the Release Candidate repository must be checked against a printed Release Checklist and a printed copy of this document for completeness and accuracy.   Checklist: Codeshelf EE Design Process and Release", 
            "title": "Step 7: Release Checklist (Engineer, HWTE and ProdMgr)"
        }, 
        {
            "location": "/hardware/pcba/#step-8-release-tag-engineer", 
            "text": "This step includes a complete review of the design and BOM. When the checklist is passed, the Git repository will be tagged as a release.", 
            "title": "Step 8: Release Tag (Engineer)"
        }, 
        {
            "location": "/hardware/pcba/#step-9-arena-prodmgr", 
            "text": "At this point we have an object that is manufacturable and if it passes all pre-production tests it will never, ever change again.  For this reason it is now safe to enter all pre-release package files into the Arena database before continuing the release process.  Reference the Arena process document at:", 
            "title": "Step 9: Arena (ProdMgr)"
        }, 
        {
            "location": "/hardware/pcba/#step-10-build-first-articles-prodmgr", 
            "text": "Once a part releases prior to manufacture we send the release package to the CMS for a request to quote/manufacture.   The CMS is not allowed to make any changes to this package, including vendor or part substitutions, without first looping back to Codeshelf to obtain an ECO.  The most common case is that the CMS requests permission to swap parts or vendors for passives.  When we receive the ECR from the CMS, we review it and decide if we will approve the change.  If we agree to approve the change then we capture that change into the appropriate documents (BOM, ECO, etc.) and re-release the product with these changes.  When the device comes back from the fab, it gets assembled by the prototype shop (if not already assembled by the outside CMS).   Check whether CMS has any modifications to the design. If so, the design needs to be revised and re-versioned.", 
            "title": "Step 10: Build First Articles (ProdMgr)"
        }, 
        {
            "location": "/hardware/pcba/#step-11-test-and-validate-first-articles-hwte", 
            "text": "Program and test the device in the manufacturing/test jig.  Run the MAT, if possible.  Run the device in the AMT (units tests and E2E tests)   If approved for production then the proceed to step 12, otherwise proceed to step 1.", 
            "title": "Step 11: Test and Validate First Articles (HWTE)"
        }, 
        {
            "location": "/hardware/pcba/#step-12-release-announcement-prodmgr", 
            "text": "If the First Articles are proven good, a release announcement will be issued, the Current and Planned Hardware Releases document will be updated, and the item will be cleared for further production.", 
            "title": "Step 12: Release Announcement (ProdMgr)"
        }, 
        {
            "location": "/hardware/pcba/#step-13-post-release-review-prodmgr", 
            "text": "Review the release process with the Engineer  Change the release process document as needed  Change the release checklists as needed", 
            "title": "Step 13: Post Release Review (ProdMgr)"
        }, 
        {
            "location": "/hardware/pcb_checklist/", 
            "text": "PCB Release Checklist\n\n\nDirectory Setup\n\n\n\n\nIn Git: Select or create repo for a new design.\n\n\nIn Eagle Control Panel (main window), add the repo or Git folder to \u201cProjects\u201d drop down\n\n\n\n\nProject Setup\n\n\n\n\nWithin the \u201cProjects\u201d drop down of the Control Panel, select desired folder, right-click the folder and select \u201cNew Project\u201d. This will create a RED new project folder inside it which designates a project.\n\n\nDouble-click the folder to enter into the project (denoted by a GREEN dot next to the folder when it is open) or double-click it again to close it (green light dot turns grey)\n\n\n\n\nLibrary Setup\n\n\n\n\nA set of common / past components is currently stored in the Git under \u201cArchive\u201d  -\n \u201cEagle Libraries\u201d -\n \u201cGW-devices\u201d; or in the Control Panel under \u201cLibraries\u201d -\n \u201cEagle Libraries\u201d. For KW2-specific parts, there is a library \u201cKW2\u201d in the same directory.\n\n\n\n\nNOTE: Library locations and content should probably be adjusted. Current common parts include a set of SMD resistors, capacitors, inductors, buttons, barrel jacks, several number displays and miscellaneous connectors.\n\n\nSchematic creation\n\n\n\n\nIf not already open, double-click on Project folder or right-click -\n \u201cOpen\u201d in the Control Panel to open the project\n\n\nIn Control Panel, \u201cFile\u201d -\n \u201cNew\u201d -\n \u201cSchematic\u201d or right-click on Project folder, then \u201cNew\u201d -\n \u201cSchematic\u201d. This opens a Schematic Editor window.\n\n\nMake sure board and schematic are consistent - ALWAYS have both layers open at the same time in Eagle!\n\n\n\n\nLibrary creation\n\n\n\n\nTo create a new part, a schematic symbol (\u201csymbol\u201d), footprint (\u201cpackage\u201d) and association between the two (\u201cdevice\u201d) is required.\n\n\nIn the top drop down (\u201cLibraries\u201d) of the Control Panel, navigate to or add your library.\n\n\nDouble-click to open it, this will generate a new window.\n\n\nTo create a schematic symbol, click the gate symbol in the menu bar. Select a current symbol to edit or create a new one. This will open a further new window where a symbol can be drawn.\n\n\nDraw \n place pins, rename pins by datasheet / function if desired\n\n\nTo create a footprint, click the chip symbol in the menu bar. Select an existing or create a new footprint in the same manner as above.\n\n\nName pads by datasheet / function if desired\n\n\n\n\n\n\n\n\nTo associate the symbol with the footprint, click the button with 4 gates in the menu bar. Either enter a new device name or select an existing one.\n\n\n\n\nAdd schematic symbol via the gate button on the left menu panel (under the wrench button) and place it at the origin marker unless otherwise required.\n\n\nAttach a footprint by selecting the \u201cNew\u201d button at the bottom of the right panel.\n\n\nClick \u201cConnect\u201d in the same panel to associate footprint pads with symbol pins\n\n\nThe part can now be used in schematic creation.\n\n\nLayout creation\n\n\n\n\n\n\n\n\nOnce a schematic is completed, convert it to a layout. \u201cFile\u201d -\n \u201cSwitch to board\u201d (in Schematic Editor) will create a layout file with the same name in the project in the Layout Editor. If all symbols are part of a correctly created device, the footprints should all be added automatically.\n\n\n\n\n\n\nLayer settings\n\n\n\n\nClick on the magnifying glass with wires in it (bottom most button on the right column of the left-side menu panel)\n\n\nSelect the \u201cLayers\u201d tab and adjust as required. Note: Eagle by default numbers layers starting at 1 for the top layer and 16 for the bottom layer. A 2-layer board thus has top = 1 and bottom = 16, whereas a 4-layer has top = 1, inner1 = 2, inner2 = 15 and bottom = 16. NOTE: The example setup is incorrect; using it will result in a stackup numbered 1,2,3,16 which breaks various other features in Eagle. Ensure your setup is numbered correctly!\n\n\n\n\nDRC settings\n\n\n\n\nIn the same panel, adjust minimum feature size under \u201cSizes\u201d, trace / space / board edge clearances under \u201cClearance\u201d and minimum annular rings for vias and pads under \u201cRestring\u201d. Additionally, in \u201cMisc\u201d, check the \u201cCheck angle\u201d box for best results.\n\n\n\n\nVerify a design in Eagle\n\n\n\n\nDRC (Design review check) should have no warnings or errors.\n\n\nERC check should have no warnings or errors.\n\n\n\n\nExporting a design\n\n\n\n\nCAM files accessed via the blue film-reel icon on the top menu or under \u201cFile\u201d -\n \u201cCAM Processor\u201d of the Layout Editor.\n\n\nManufacturing files:\n\n\nGerber files (copper, silk, mask, stencil layers)\n\n\nCodeshelf has CAM files under \u201cArchive\u201d -\n \u201cCAM_ULP\u201d\n\n\nFor each file, ensure the correct layers and features are checked. Defaults for copper are 1,2,15,16 for 4-layer boards and 1,16 for 2-layer. Adding the board outline to each file is not a bad idea either.\n\n\nFor each file, ensure the output directory is correct. By default, the file will be created in the project directory. To change this, each file must be adjusted individually (!)\n\n\n\n\n\n\nDrill file (holes)\n\n\nCodeshelf does not have a CAM file for drills. Eagle provides one under \u201cCAM Jobs\u201d in the Control Panel (or under \u201ccam\u201d in the Eagle install directory)\n\n\n\n\n\n\nCentroid\n\n\nBOM (from schematic)\n\n\n\n\nCreate a New Library Part\n\n\nNew Library Part Review\n\n\n\n\nSchematic symbol corresponds to function / correct number of pins.\n\n\nUse a good naming scheme for the schematic pins.\n\n\nPins on schematic match pins on package.\n\n\nPackage geometric center is the part\u2019s centroid.\n\n\nCorrect footprint is attached (e.g schematic and symbol have same number of pins).\n\n\nFootprint has pins in correct order (check layer for mirroring possibilities).\n\n\nPrint 1.0 scale version and verify that the footprint matches the part and datasheet.\n\n\n\n\nRelease to Manufacturing Checklist\n\n\nSchematic review:\n\n\n\n\nAll parts have assigned and CORRECT manufacturers and part numbers (check assigned datasheet vs symbol pin numbers, for instance)\n\n\nPins on devices labelled as according to datasheets\n\n\nNets named correctly (by function or pins)\n\n\n\n\nLayout review\n\n\n\n\nFiducials for assembly (3 per side)\n\n\nCheck net connectivity\n\n\nMake sure copper pours are present on all layers AND ACTUALLY POURED\n\n\nCheck Reference Designators \n other labelling are on the correct silkscreen layers\n\n\nCheck DRC for correct trace / space and minimum silk screen width according to manufacturer\n\n\nCorrect version number applied (out of house do NOT include \u201cP\u201d suffix)\n\n\nAll polarized components checked\n\n\nCheck the orientation of all connectors\n\n\nBypass capacitors located close to IC power pins\n\n\nPCB has power rail test points, and test points for important signals, all labeled and accessible\n\n\nLayout PCB so that any rework or repair of a component does not require removal of other components\n\n\nMounting holes electrically isolated or not\n\n\nProper mounting hole clearance for hardware\n\n\nSMD pad shapes checked\n\n\nCheck for traces running under noisy or sensitive components\n\n\nNo vias under metal-film resistors and similar poorly insulated parts\n\n\nCheck for traces which may be susceptible to solder bridging if not masked (OFN pins etc)\n\n\nCheck for dead-end traces, unless used on purpose\n\n\nProvide multiple vias for high current and/or low impedance traces\n\n\nComponent and trace keepout areas observed\n\n\nGround planes where possible\n\n\nTrace width sufficient for current carried\n\n\nNo silkscreen legend text over vias (if vias not soldermasked) or holes\n\n\nAll legend text reads in one or two directions\n\n\nCompany logo in silkscreen legend\n\n\nDate code on PCB\n\n\nAll silkscreen text located to be readable when the board is populated\n\n\nAll ICs have pin one clearly marked, visible even when chip is installed\n\n\nEnsure it is in silkscreen layer\n\n\n\n\n\n\nCAD design rule checking must be turned on\n\n\nHigh frequency circuitry precautions observed\n\n\nSoldermask does or does not cover vias\n\n\nPCB thickness, material, copper weight noted\n\n\nThermal reliefs for internal power layers\n\n\nSolder paste mask openings are proper size\n\n\nBlind and buried vias not allowed on multilayer PCB unless required\n\n\nFinished hole sizes are \n=10 mils larger than lead\n\n\nAll capacitors have been designed with a 50 percent voltage margin.\n\n\nAll new components/suppliers must be reviewed for component obsolescence and component availability\n\n\nAll PCBA designs must have the revision level released to Document Control and assembly drawing indicating any special assembly/design requirements that violate the standard PCB assembly conventions (i.e. components on the solder side, cuts and jumps, heat-sink assemblies, etc.). - Open question for Calla / Nate\n\n\nAll power traces wide enough for anticipated current\n\n\n\n\nExport Production Files\n\n\n\n\nBOM\n\n\nCheck whether existing columns are: \n\n\nQty\n\n\nValue\n\n\nPackage\n\n\nParts/Reference Designator\n\n\nMFGN\n\n\nMFGP\n\n\nNotes\n\n\n\n\n\n\nGerbers\n\n\nFor each file, make sure the right features are selected as well as the board outline\n\n\n\n\n\n\nDrill file\n\n\nVisual inspection to see if holes line up\n\n\n\n\n\n\nCentroid\n\n\n\n\n\n\n\n\nReview Gerber Files\n\n\n\n\nCheck to see if right files exists\n\n\nTop silk\n\n\nTop mask\n\n\nTop paste\n\n\nTop copper\n\n\nInner copper 1\n\n\nInner copper 2\n\n\nBottom copper\n\n\nBottom paste\n\n\nBottom mask\n\n\nBottom silk\n\n\nTop centroid\n\n\nBoard outline\n\n\nDRD (drill file)\n\n\n\n\n\n\nOpen in a gerber file viewer (GerbV, ViewMate)\n\n\nCheck to see if each layer contains what you expect (traces, pours, holes)\n\n\nEnsure correct placement of all layers (check whether visually stacks up correctly)\n\n\n\n\nPCBA DESIGN REMINDERS\n\n\n\n\nNets named correctly (by function or pins).\n\n\nLay down ground plane, only after ground traces.\n\n\nCheck orientation of mating connectors in associated designs", 
            "title": "Release CheckList"
        }, 
        {
            "location": "/hardware/pcb_checklist/#pcb-release-checklist", 
            "text": "", 
            "title": "PCB Release Checklist"
        }, 
        {
            "location": "/hardware/pcb_checklist/#directory-setup", 
            "text": "In Git: Select or create repo for a new design.  In Eagle Control Panel (main window), add the repo or Git folder to \u201cProjects\u201d drop down", 
            "title": "Directory Setup"
        }, 
        {
            "location": "/hardware/pcb_checklist/#project-setup", 
            "text": "Within the \u201cProjects\u201d drop down of the Control Panel, select desired folder, right-click the folder and select \u201cNew Project\u201d. This will create a RED new project folder inside it which designates a project.  Double-click the folder to enter into the project (denoted by a GREEN dot next to the folder when it is open) or double-click it again to close it (green light dot turns grey)", 
            "title": "Project Setup"
        }, 
        {
            "location": "/hardware/pcb_checklist/#library-setup", 
            "text": "A set of common / past components is currently stored in the Git under \u201cArchive\u201d  -  \u201cEagle Libraries\u201d -  \u201cGW-devices\u201d; or in the Control Panel under \u201cLibraries\u201d -  \u201cEagle Libraries\u201d. For KW2-specific parts, there is a library \u201cKW2\u201d in the same directory.   NOTE: Library locations and content should probably be adjusted. Current common parts include a set of SMD resistors, capacitors, inductors, buttons, barrel jacks, several number displays and miscellaneous connectors.", 
            "title": "Library Setup"
        }, 
        {
            "location": "/hardware/pcb_checklist/#schematic-creation", 
            "text": "If not already open, double-click on Project folder or right-click -  \u201cOpen\u201d in the Control Panel to open the project  In Control Panel, \u201cFile\u201d -  \u201cNew\u201d -  \u201cSchematic\u201d or right-click on Project folder, then \u201cNew\u201d -  \u201cSchematic\u201d. This opens a Schematic Editor window.  Make sure board and schematic are consistent - ALWAYS have both layers open at the same time in Eagle!", 
            "title": "Schematic creation"
        }, 
        {
            "location": "/hardware/pcb_checklist/#library-creation", 
            "text": "To create a new part, a schematic symbol (\u201csymbol\u201d), footprint (\u201cpackage\u201d) and association between the two (\u201cdevice\u201d) is required.  In the top drop down (\u201cLibraries\u201d) of the Control Panel, navigate to or add your library.  Double-click to open it, this will generate a new window.  To create a schematic symbol, click the gate symbol in the menu bar. Select a current symbol to edit or create a new one. This will open a further new window where a symbol can be drawn.  Draw   place pins, rename pins by datasheet / function if desired  To create a footprint, click the chip symbol in the menu bar. Select an existing or create a new footprint in the same manner as above.  Name pads by datasheet / function if desired     To associate the symbol with the footprint, click the button with 4 gates in the menu bar. Either enter a new device name or select an existing one.   Add schematic symbol via the gate button on the left menu panel (under the wrench button) and place it at the origin marker unless otherwise required.  Attach a footprint by selecting the \u201cNew\u201d button at the bottom of the right panel.  Click \u201cConnect\u201d in the same panel to associate footprint pads with symbol pins  The part can now be used in schematic creation.  Layout creation     Once a schematic is completed, convert it to a layout. \u201cFile\u201d -  \u201cSwitch to board\u201d (in Schematic Editor) will create a layout file with the same name in the project in the Layout Editor. If all symbols are part of a correctly created device, the footprints should all be added automatically.", 
            "title": "Library creation"
        }, 
        {
            "location": "/hardware/pcb_checklist/#layer-settings", 
            "text": "Click on the magnifying glass with wires in it (bottom most button on the right column of the left-side menu panel)  Select the \u201cLayers\u201d tab and adjust as required. Note: Eagle by default numbers layers starting at 1 for the top layer and 16 for the bottom layer. A 2-layer board thus has top = 1 and bottom = 16, whereas a 4-layer has top = 1, inner1 = 2, inner2 = 15 and bottom = 16. NOTE: The example setup is incorrect; using it will result in a stackup numbered 1,2,3,16 which breaks various other features in Eagle. Ensure your setup is numbered correctly!", 
            "title": "Layer settings"
        }, 
        {
            "location": "/hardware/pcb_checklist/#drc-settings", 
            "text": "In the same panel, adjust minimum feature size under \u201cSizes\u201d, trace / space / board edge clearances under \u201cClearance\u201d and minimum annular rings for vias and pads under \u201cRestring\u201d. Additionally, in \u201cMisc\u201d, check the \u201cCheck angle\u201d box for best results.", 
            "title": "DRC settings"
        }, 
        {
            "location": "/hardware/pcb_checklist/#verify-a-design-in-eagle", 
            "text": "DRC (Design review check) should have no warnings or errors.  ERC check should have no warnings or errors.", 
            "title": "Verify a design in Eagle"
        }, 
        {
            "location": "/hardware/pcb_checklist/#exporting-a-design", 
            "text": "CAM files accessed via the blue film-reel icon on the top menu or under \u201cFile\u201d -  \u201cCAM Processor\u201d of the Layout Editor.  Manufacturing files:  Gerber files (copper, silk, mask, stencil layers)  Codeshelf has CAM files under \u201cArchive\u201d -  \u201cCAM_ULP\u201d  For each file, ensure the correct layers and features are checked. Defaults for copper are 1,2,15,16 for 4-layer boards and 1,16 for 2-layer. Adding the board outline to each file is not a bad idea either.  For each file, ensure the output directory is correct. By default, the file will be created in the project directory. To change this, each file must be adjusted individually (!)    Drill file (holes)  Codeshelf does not have a CAM file for drills. Eagle provides one under \u201cCAM Jobs\u201d in the Control Panel (or under \u201ccam\u201d in the Eagle install directory)    Centroid  BOM (from schematic)", 
            "title": "Exporting a design"
        }, 
        {
            "location": "/hardware/pcb_checklist/#create-a-new-library-part", 
            "text": "", 
            "title": "Create a New Library Part"
        }, 
        {
            "location": "/hardware/pcb_checklist/#new-library-part-review", 
            "text": "Schematic symbol corresponds to function / correct number of pins.  Use a good naming scheme for the schematic pins.  Pins on schematic match pins on package.  Package geometric center is the part\u2019s centroid.  Correct footprint is attached (e.g schematic and symbol have same number of pins).  Footprint has pins in correct order (check layer for mirroring possibilities).  Print 1.0 scale version and verify that the footprint matches the part and datasheet.", 
            "title": "New Library Part Review"
        }, 
        {
            "location": "/hardware/pcb_checklist/#release-to-manufacturing-checklist", 
            "text": "", 
            "title": "Release to Manufacturing Checklist"
        }, 
        {
            "location": "/hardware/pcb_checklist/#schematic-review", 
            "text": "All parts have assigned and CORRECT manufacturers and part numbers (check assigned datasheet vs symbol pin numbers, for instance)  Pins on devices labelled as according to datasheets  Nets named correctly (by function or pins)", 
            "title": "Schematic review:"
        }, 
        {
            "location": "/hardware/pcb_checklist/#layout-review", 
            "text": "Fiducials for assembly (3 per side)  Check net connectivity  Make sure copper pours are present on all layers AND ACTUALLY POURED  Check Reference Designators   other labelling are on the correct silkscreen layers  Check DRC for correct trace / space and minimum silk screen width according to manufacturer  Correct version number applied (out of house do NOT include \u201cP\u201d suffix)  All polarized components checked  Check the orientation of all connectors  Bypass capacitors located close to IC power pins  PCB has power rail test points, and test points for important signals, all labeled and accessible  Layout PCB so that any rework or repair of a component does not require removal of other components  Mounting holes electrically isolated or not  Proper mounting hole clearance for hardware  SMD pad shapes checked  Check for traces running under noisy or sensitive components  No vias under metal-film resistors and similar poorly insulated parts  Check for traces which may be susceptible to solder bridging if not masked (OFN pins etc)  Check for dead-end traces, unless used on purpose  Provide multiple vias for high current and/or low impedance traces  Component and trace keepout areas observed  Ground planes where possible  Trace width sufficient for current carried  No silkscreen legend text over vias (if vias not soldermasked) or holes  All legend text reads in one or two directions  Company logo in silkscreen legend  Date code on PCB  All silkscreen text located to be readable when the board is populated  All ICs have pin one clearly marked, visible even when chip is installed  Ensure it is in silkscreen layer    CAD design rule checking must be turned on  High frequency circuitry precautions observed  Soldermask does or does not cover vias  PCB thickness, material, copper weight noted  Thermal reliefs for internal power layers  Solder paste mask openings are proper size  Blind and buried vias not allowed on multilayer PCB unless required  Finished hole sizes are  =10 mils larger than lead  All capacitors have been designed with a 50 percent voltage margin.  All new components/suppliers must be reviewed for component obsolescence and component availability  All PCBA designs must have the revision level released to Document Control and assembly drawing indicating any special assembly/design requirements that violate the standard PCB assembly conventions (i.e. components on the solder side, cuts and jumps, heat-sink assemblies, etc.). - Open question for Calla / Nate  All power traces wide enough for anticipated current", 
            "title": "Layout review"
        }, 
        {
            "location": "/hardware/pcb_checklist/#export-production-files", 
            "text": "BOM  Check whether existing columns are:   Qty  Value  Package  Parts/Reference Designator  MFGN  MFGP  Notes    Gerbers  For each file, make sure the right features are selected as well as the board outline    Drill file  Visual inspection to see if holes line up    Centroid", 
            "title": "Export Production Files"
        }, 
        {
            "location": "/hardware/pcb_checklist/#review-gerber-files", 
            "text": "Check to see if right files exists  Top silk  Top mask  Top paste  Top copper  Inner copper 1  Inner copper 2  Bottom copper  Bottom paste  Bottom mask  Bottom silk  Top centroid  Board outline  DRD (drill file)    Open in a gerber file viewer (GerbV, ViewMate)  Check to see if each layer contains what you expect (traces, pours, holes)  Ensure correct placement of all layers (check whether visually stacks up correctly)", 
            "title": "Review Gerber Files"
        }, 
        {
            "location": "/hardware/pcb_checklist/#pcba-design-reminders", 
            "text": "Nets named correctly (by function or pins).  Lay down ground plane, only after ground traces.  Check orientation of mating connectors in associated designs", 
            "title": "PCBA DESIGN REMINDERS"
        }, 
        {
            "location": "/hardware/mech_eng/", 
            "text": "Step 0: Kick-off Development Cycle\n\n\nThe kick-off is essential to inform everyone that the object is now in-flight for another development cycle.  The steps for kick-off are:\n\n\n\n\nSend an announce email to rnd@codeshelf.com\n\n\nSchedule Kick-off meeting\n\n\nEnsure that the Current and Planned Hardware Releases page in the ZeroDiff Process Home page is accurate for the device (and any related projects or sub-assemblies) at every step of this process document. \n\n\nPrint this page and make sure it follows the device through the development cycle.\n\n\nAlways document while working, and always work with a pen.\n\n\n\n\nFor information about how an object is designed, reference In Action Product Design Process. \n\n\nFor information regarding Testing Criteria, reference Basic Hardware Testing Criteria.\n\n\nStep 1: Create Design Artifacts\n\n\nThe first step of the design and manufacture of mechanicals is to create all of the relevant design and production artifacts (files).\n\n\nWe are currently using Solidworks, Rhino, or Illustrator to design Mechanicals. Production documentation (drawings) is executed in Solidworks and output as PDF. Derivative CAD format files (those sent to vendors) are SLDPRT, STEP or EPS, depending on manufacturing process.\n\n\n\n\nUpload relevant Solidworks files to GrabCAD\n\n\nBe sure that the Solidworks files stay synced to GrabCAD in order to preserve change history\n\n\n\n\nStep 2: Create a Prototype (Designer, ProtoMgr)\n\n\nTo validate the design we produce an in-house prototype when possible.  This is a somewhat lightweight process and is not a tagged GitHub release, because there may be many of them.  \n\n\n\n\nIf no prior Github repository exists for the project in question, file a JIRA Service Request with DevOps and request one with the appropriate project name.\n\n\nThe engineer commits the CAD derivative files and PDF drawings to GitHub.\n\n\n\n\nIf the assembly requires a BOM the engineer creates a prototype BOM and mails it to the prototype shop manager.\n\n\n\n\n\n\nHand off the document package to the Prototype Shop.\n\n\n\n\nThe prototype shop manager schedules the build and coordinates with the production manager to acquire any missing BOM components.\n\n\nThe prototype shop converts the STEP or SLDPRT file into gcode using the HSMWorks plugin for Solidworks.\n\n\nThe prototype shop makes the parts.\n\n\nThe prototype shop assembles the housing and delivers it to the HWTE. In the absence of the HWTE, prototypes are delivered to the design engineer.\n\n\n\n\n\n\n\n\nWhen mechanical devices cannot be prototyped in-house:\n\n\n\n\nEmail production files to the ProdMgr along with requested turnaround time and quantities. \n\n\nProdMgr will place RFQs and PO.\n\n\nPrototypes will be made at a CMS.\n\n\nPrototypes will be delivered to the HWTE. In the absence of the HWTE, prototypes are delivered to the design engineer.\n\n\n\n\n\n\n\n\nStep 3: Test the Prototype (HWTE, Designer)\n\n\n\n\nThe HWTE and design engineer create a complete template object (built to the design intent) to test against.\n\n\nThe HWTE and design engineer run all of the relevant tests set out in the design process to validate that the prototype is correct. Refer to the Basic Hardware Testing Criteria google doc. \n\n\nThe document should be printed and reviewed with a pen.\n\n\nIf the HWTE approves the device for production then proceed to step 4, otherwise go back to step 1.\n\n\n\n\nHand off the document package to the Designer.\n\n\nStep 4: Create Release Candidate (RC) Artifacts (Designer)\n\n\nFor a mechanical/housing manufacturing run, the release package contains the following documents, as appropriate to the design and type of manufacturing process (in other words, not all designs will require each of the file types below).  The filenames derive from the base product ID, e.g. POSCON.XXXXXX  \n\n\nCNC Manufacturing typical file sets\n\n\n\n\n\n\n\n\nFile\n\n\nExample\n\n\nProd/Design Folder\n\n\n\n\n\n\n\n\n\n\nDrawing\n\n\nPOSCON.FACE.dxf\n\n\nProduction\n\n\n\n\n\n\nDrawing\n\n\nPOSCON.FACE.pdf\n\n\nProduction\n\n\n\n\n\n\nVector File\n\n\nPOSCON.FACE.eps\n\n\nProduction (if lasercut)\n\n\n\n\n\n\nSolidworks File\n\n\nPOSCON.FACE.SLDPRT\n\n\nProduction (if CNC)\n\n\n\n\n\n\nSTEP file\n\n\nPOSCON.FACE.STEP\n\n\nProduction (if CNC)\n\n\n\n\n\n\n\n\nLasercutting File typical file set:\n\n\n\n\n\n\n\n\nFile\n\n\nExample\n\n\nProd/Design Folder\n\n\n\n\n\n\n\n\n\n\nDrawing POSCON.FACE.pdf\n\n\nProduction\n\n\n\n\n\n\n\n\nVector File\n\n\nPOSCON.FACE.dxf\n\n\nProduction\n\n\n\n\n\n\nVector File\n\n\nP2X142 POSCON.FACE.eps\n\n\nProduction (if lasercut)\n\n\n\n\n\n\nREADME\n\n\nPOSCON.FACE.README.docx\n\n\nProduction (if lasercut):\n\n\n\n\n\n\n\n\nLasercut production file naming convention:\n\n\n\n\nSheetSize X Part yield per sheet PART.NAME.eps PRODUCTION\n\n\n\n\n3D Printed File typical file set:\n\n\n\n\n\n\n\n\nFile\n\n\nExample\n\n\nProd/Design Folder\n\n\n\n\n\n\n\n\n\n\nDrawing\n\n\nPOSCON.FACE.stl\n\n\nProduction\n\n\n\n\n\n\nDrawing\n\n\nPOSCON.FACE.pdf\n\n\nProduction\n\n\n\n\n\n\n\n\nBill of Materials, Engineering Change Order file set:\n\n\n\n\n\n\n\n\nFile\n\n\nExample\n\n\nProd/Design Folder\n\n\n\n\n\n\n\n\n\n\nBOM\n\n\nPOSCON.MECH.BOM.xlsx\n\n\nProduction\n\n\n\n\n\n\nECO\n\n\nPOSCON.FACE.eco.xlsx\n\n\nProduction\n\n\n\n\n\n\n\n\nA typical release package would include some combination of:\n\n\n\n\nDXF, AI or EPS Vector file for laser cut parts\n\n\nSpecific production files for current vendor (eg - Ponoko laser cut layout and ReadMe file)\n\n\nStereolithography File (STL)\n\n\nSLDPRT, STEP and/or IGES File\n\n\nPDF Drawing File\n\n\nEngineering Change Order (ECO)\n\n\nBill Of Materials (BOM)\n\n\n\n\nEditing ECOs:\n\n\nIf changing the design of a previously released object, best practice is to update and commit the ECO as the object is being designed.\n\n\nIf working on a new production object, follow these steps:\n\n\n\n\nOpen the New ECO Template (link here)\n\n\nThe Commit Message field for a new production object should read \"Initial Commit, v1.0\" for a new project.\n\n\nCreate a column in the ECO for each part being released by us to the right of the MISC Changes column in order to record future changes.\n\n\nCopy the Commit Message field in the ECO and paste it to the Commit Message field in Github before committing the ECO.\n\n\n\n\nIf working on a previously released production object, follow these steps:\n\n\n\n\nRecord changes to each part in its individual column.\n\n\nIf adding a new part, add a column and name it \"Part_Name Changes\".\n\n\nIf deleting a part, note that in the part's column. Do not delete the column.\n\n\nCopy the change messages into the Commit Message field in the ECO. If the message is \"none\", ignore it.\n\n\n\n\nCopy the Commit Message field in the ECO and paste it to the Commit Message field in Github before committing the ECO.\n\n\n\n\n\n\nPrint drawings\n\n\n\n\nHighlight changes\n\n\nExamine the changes for errors and make any needed corrections\n\n\n\n\nThese changes should also be reflected in the commit messages in Git.\n\n\nIf there is a design change to any part in the assembly, the entire assembly needs to increment, but other drawings in the same assembly that are separate and not changed do not need to increment. Any levels above the re-versioned assembly will also need to increment. \n\n\nEnsure that drawings made for production (other than laser cutting) comply with ANSI Standards:\n\n\n\n\nLimit dimensions should be used on all individually dimensioned toleranced parts.\n\n\nThe Baseline dimensioning system should be used to locate toleranced surfaces to avoid an accumulation of tolerance.\n\n\nAll dimensions should be given in decimals except drill sizes, fillets and rounds, and standard fasteners.\n\n\nEach dimension should be given clearly so that it can be interpreted in only one way\n\n\nDimensions should not be duplicated or the same information given in two different ways and no dimensions should be given except those needed to produce or inspect the part.\n\n\nDimensions should be given to finished surfaces or important center lines, in preference to rough surfaces, whenever possible.\n\n\nDimensions should be so given that it will not be necessary for the machinist to calculate, scale, or assume any dimension.\n\n\nDimensions should be given in the view where the shape is best shown.\n\n\nDimensions should be placed in the views where the features dimensioned are shown true shape.\n\n\nDimensions should not be placed on a view unless it eliminates long extension lines and makes the dimension clearer.\n\n\nDimensions applying to two adjacent views should be placed between the views if possible.\n\n\nThe longer dimensions should be placed outside all intermediate dimensions so that dimension lines will not cross extension lines. \n\n\nDo not force workers to assume that a feature is centered. Provide a location dimension.\n\n\nNon-toleranced detail dimensions may be chained if necessary, or avoid a complete chain of detail dimensions by omitting one and providing an overall dimension. \n\n\nDimension lines should be spaced uniformly (approximately 3/8\u201d apart).\n\n\n\n\nFor a complete ANSI checklist, refer to ANSI Dimensioning Guidelines v1.1.\n\n\nStep 5: Commit the Release Candidate Package to GitHub\n\n\nWhen working with RC files, best practices dictate that all files being created, edited and committed to GitHub be managed from the same place to keep the workflow consistent.\n\n\n\n\nCommit the above files to GitHub.\n\n\nWhen doing so, observe that no \"lockfiles\" are entered into the repository when a commit is made. (These are created when saving XLS files with LibreOffice and look like *.xls#. Right-click on these in Github and choose the \"Ignore .XLS#\" Be sure you're using the ignore command on the correct file.  \n\n\nDiff the files in Github in order to determine which files have been changed\n\n\nExamine changed files for errors\n\n\nCorrect any errors found\n\n\nTag the commit ID as a Release Candidate (RC).  E.g. V1.1-RC1\n\n\nDescriptions of changes that have been committed need to be included in the commit message.\n\n\nCopy commit messages between the RC release and the final production release into the ECO.\n\n\nThe RC tag should increment (RC1, RC2) until the object is approved for production and released with the appropriate production version tag (E.g. V1.1).\n\n\n\n\nStep 6: Release Checklist\n\n\n\n\nDownload and print all files in the RC package from GitHub. \n\n\nAll files in the RC package must be checked against a printed Checklist: Mechanical Production Review v1.4. The document should be printed and reviewed with a pen.\n\n\nAny drawings to be released to CMs must be checked by the HTWE or in-house ANSI domain expert.\n\n\nIf changes need to be made, go back to Step 4.\n\n\n\n\nStep 7: Build RC Articles (ProdMgr \n HWTE)\n\n\nOnce a part releases as RC, we send the release package to the CMS for a request to quote for manufacture.   RC articles are not needed if the same outside CM has manufactured the prototype, and the same design has been approved for production with no changes. If either the design or manufacturing process changes from the approved prototype, RC articles are needed. \n\n\n\n\nEmail the ProdMgr to request an RC build along with requested turnaround time and quantity. \n\n\n\n\nHand off the document package to the Production Manager.\n\n\n\n\nProdMgr will place RFQs and PO.\n\n\nRC articles will be made at a CMS.\n\n\n\n\nThe CMS is not allowed to make any changes to this package without first looping back to Codeshelf to obtain an approved ECO.  If we receive an ECR from the CMS, we review it and decide if we will approve the change.  If we agree to approve the change, then we capture that change in the appropriate documents (BOM, ECO, etc.) and re-release the product with these changes, incrementing the tag. \n\n\nHand off the document package to the Hardware Test Engineer when RC Articles are complete and delivered.\n\n\n\n\nRC articles will be delivered to the HWTE. In the absence of the HWTE, RC articles are delivered to the design engineer.\n\n\nWhen the device comes back from the CMS, it gets assembled by the prototype shop (if not already assembled by the outside CMS).\n\n\nProdMgr checks whether CMS has made any modifications to the design. If so, the design needs to be revised and re-versioned. \n\n\n\n\nStep 8: Test and Validate RC Articles (HWTE \n Designer)\n\n\nRC articles must be approved by the HWTE / designer in order to release for production. \n\n\nHand off the document package to the Hardware Test Engineer.\n\n\n\n\nPrint the Basic Hardware Testing Criteria and review with a pen.\n\n\nRun all of the relevant tests set out in the design process to validate that the article is correct.\n\n\n\n\nIf the HWTE approves the device for production then proceed to step 9, otherwise go back to step 4.\nStep 9: Release Tag (Designer)\n\n\nHand off the document package to the designer/engineer.\n\n\nWhen RC articles are proven good and approved for production:\n\n\n\n\nTag the final commit with with the appropriate production version number. \n\n\n\n\nGithub automatically notifies ProdMgr of the release. \n\n\nHand off the document package to the Production Manager.\n\n\nStep 10: Release Announcement (ProdMgr)\n\n\nIssue a release announcement\nUpdate the Current and Planned Hardware Releases and Products in need of release documents.\n\n\n\nThe item is then cleared for ongoing production.\n\n\nStep 11: Post Release Review (ProdMgr)\n\n\n\n\nReview the release process with the Engineer\n\n\nChange the release process document as needed\n\n\nChange the release checklists as needed", 
            "title": "MechE Dev"
        }, 
        {
            "location": "/hardware/mech_eng/#step-0-kick-off-development-cycle", 
            "text": "The kick-off is essential to inform everyone that the object is now in-flight for another development cycle.  The steps for kick-off are:   Send an announce email to rnd@codeshelf.com  Schedule Kick-off meeting  Ensure that the Current and Planned Hardware Releases page in the ZeroDiff Process Home page is accurate for the device (and any related projects or sub-assemblies) at every step of this process document.   Print this page and make sure it follows the device through the development cycle.  Always document while working, and always work with a pen.   For information about how an object is designed, reference In Action Product Design Process.   For information regarding Testing Criteria, reference Basic Hardware Testing Criteria.", 
            "title": "Step 0: Kick-off Development Cycle"
        }, 
        {
            "location": "/hardware/mech_eng/#step-1-create-design-artifacts", 
            "text": "The first step of the design and manufacture of mechanicals is to create all of the relevant design and production artifacts (files).  We are currently using Solidworks, Rhino, or Illustrator to design Mechanicals. Production documentation (drawings) is executed in Solidworks and output as PDF. Derivative CAD format files (those sent to vendors) are SLDPRT, STEP or EPS, depending on manufacturing process.   Upload relevant Solidworks files to GrabCAD  Be sure that the Solidworks files stay synced to GrabCAD in order to preserve change history", 
            "title": "Step 1: Create Design Artifacts"
        }, 
        {
            "location": "/hardware/mech_eng/#step-2-create-a-prototype-designer-protomgr", 
            "text": "To validate the design we produce an in-house prototype when possible.  This is a somewhat lightweight process and is not a tagged GitHub release, because there may be many of them.     If no prior Github repository exists for the project in question, file a JIRA Service Request with DevOps and request one with the appropriate project name.  The engineer commits the CAD derivative files and PDF drawings to GitHub.   If the assembly requires a BOM the engineer creates a prototype BOM and mails it to the prototype shop manager.    Hand off the document package to the Prototype Shop.   The prototype shop manager schedules the build and coordinates with the production manager to acquire any missing BOM components.  The prototype shop converts the STEP or SLDPRT file into gcode using the HSMWorks plugin for Solidworks.  The prototype shop makes the parts.  The prototype shop assembles the housing and delivers it to the HWTE. In the absence of the HWTE, prototypes are delivered to the design engineer.     When mechanical devices cannot be prototyped in-house:   Email production files to the ProdMgr along with requested turnaround time and quantities.   ProdMgr will place RFQs and PO.  Prototypes will be made at a CMS.  Prototypes will be delivered to the HWTE. In the absence of the HWTE, prototypes are delivered to the design engineer.", 
            "title": "Step 2: Create a Prototype (Designer, ProtoMgr)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-3-test-the-prototype-hwte-designer", 
            "text": "The HWTE and design engineer create a complete template object (built to the design intent) to test against.  The HWTE and design engineer run all of the relevant tests set out in the design process to validate that the prototype is correct. Refer to the Basic Hardware Testing Criteria google doc.   The document should be printed and reviewed with a pen.  If the HWTE approves the device for production then proceed to step 4, otherwise go back to step 1.   Hand off the document package to the Designer.", 
            "title": "Step 3: Test the Prototype (HWTE, Designer)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-4-create-release-candidate-rc-artifacts-designer", 
            "text": "For a mechanical/housing manufacturing run, the release package contains the following documents, as appropriate to the design and type of manufacturing process (in other words, not all designs will require each of the file types below).  The filenames derive from the base product ID, e.g. POSCON.XXXXXX    CNC Manufacturing typical file sets     File  Example  Prod/Design Folder      Drawing  POSCON.FACE.dxf  Production    Drawing  POSCON.FACE.pdf  Production    Vector File  POSCON.FACE.eps  Production (if lasercut)    Solidworks File  POSCON.FACE.SLDPRT  Production (if CNC)    STEP file  POSCON.FACE.STEP  Production (if CNC)     Lasercutting File typical file set:     File  Example  Prod/Design Folder      Drawing POSCON.FACE.pdf  Production     Vector File  POSCON.FACE.dxf  Production    Vector File  P2X142 POSCON.FACE.eps  Production (if lasercut)    README  POSCON.FACE.README.docx  Production (if lasercut):     Lasercut production file naming convention:   SheetSize X Part yield per sheet PART.NAME.eps PRODUCTION   3D Printed File typical file set:     File  Example  Prod/Design Folder      Drawing  POSCON.FACE.stl  Production    Drawing  POSCON.FACE.pdf  Production     Bill of Materials, Engineering Change Order file set:     File  Example  Prod/Design Folder      BOM  POSCON.MECH.BOM.xlsx  Production    ECO  POSCON.FACE.eco.xlsx  Production     A typical release package would include some combination of:   DXF, AI or EPS Vector file for laser cut parts  Specific production files for current vendor (eg - Ponoko laser cut layout and ReadMe file)  Stereolithography File (STL)  SLDPRT, STEP and/or IGES File  PDF Drawing File  Engineering Change Order (ECO)  Bill Of Materials (BOM)   Editing ECOs:  If changing the design of a previously released object, best practice is to update and commit the ECO as the object is being designed.  If working on a new production object, follow these steps:   Open the New ECO Template (link here)  The Commit Message field for a new production object should read \"Initial Commit, v1.0\" for a new project.  Create a column in the ECO for each part being released by us to the right of the MISC Changes column in order to record future changes.  Copy the Commit Message field in the ECO and paste it to the Commit Message field in Github before committing the ECO.   If working on a previously released production object, follow these steps:   Record changes to each part in its individual column.  If adding a new part, add a column and name it \"Part_Name Changes\".  If deleting a part, note that in the part's column. Do not delete the column.  Copy the change messages into the Commit Message field in the ECO. If the message is \"none\", ignore it.   Copy the Commit Message field in the ECO and paste it to the Commit Message field in Github before committing the ECO.    Print drawings   Highlight changes  Examine the changes for errors and make any needed corrections   These changes should also be reflected in the commit messages in Git.  If there is a design change to any part in the assembly, the entire assembly needs to increment, but other drawings in the same assembly that are separate and not changed do not need to increment. Any levels above the re-versioned assembly will also need to increment.   Ensure that drawings made for production (other than laser cutting) comply with ANSI Standards:   Limit dimensions should be used on all individually dimensioned toleranced parts.  The Baseline dimensioning system should be used to locate toleranced surfaces to avoid an accumulation of tolerance.  All dimensions should be given in decimals except drill sizes, fillets and rounds, and standard fasteners.  Each dimension should be given clearly so that it can be interpreted in only one way  Dimensions should not be duplicated or the same information given in two different ways and no dimensions should be given except those needed to produce or inspect the part.  Dimensions should be given to finished surfaces or important center lines, in preference to rough surfaces, whenever possible.  Dimensions should be so given that it will not be necessary for the machinist to calculate, scale, or assume any dimension.  Dimensions should be given in the view where the shape is best shown.  Dimensions should be placed in the views where the features dimensioned are shown true shape.  Dimensions should not be placed on a view unless it eliminates long extension lines and makes the dimension clearer.  Dimensions applying to two adjacent views should be placed between the views if possible.  The longer dimensions should be placed outside all intermediate dimensions so that dimension lines will not cross extension lines.   Do not force workers to assume that a feature is centered. Provide a location dimension.  Non-toleranced detail dimensions may be chained if necessary, or avoid a complete chain of detail dimensions by omitting one and providing an overall dimension.   Dimension lines should be spaced uniformly (approximately 3/8\u201d apart).   For a complete ANSI checklist, refer to ANSI Dimensioning Guidelines v1.1.", 
            "title": "Step 4: Create Release Candidate (RC) Artifacts (Designer)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-5-commit-the-release-candidate-package-to-github", 
            "text": "When working with RC files, best practices dictate that all files being created, edited and committed to GitHub be managed from the same place to keep the workflow consistent.   Commit the above files to GitHub.  When doing so, observe that no \"lockfiles\" are entered into the repository when a commit is made. (These are created when saving XLS files with LibreOffice and look like *.xls#. Right-click on these in Github and choose the \"Ignore .XLS#\" Be sure you're using the ignore command on the correct file.    Diff the files in Github in order to determine which files have been changed  Examine changed files for errors  Correct any errors found  Tag the commit ID as a Release Candidate (RC).  E.g. V1.1-RC1  Descriptions of changes that have been committed need to be included in the commit message.  Copy commit messages between the RC release and the final production release into the ECO.  The RC tag should increment (RC1, RC2) until the object is approved for production and released with the appropriate production version tag (E.g. V1.1).", 
            "title": "Step 5: Commit the Release Candidate Package to GitHub"
        }, 
        {
            "location": "/hardware/mech_eng/#step-6-release-checklist", 
            "text": "Download and print all files in the RC package from GitHub.   All files in the RC package must be checked against a printed Checklist: Mechanical Production Review v1.4. The document should be printed and reviewed with a pen.  Any drawings to be released to CMs must be checked by the HTWE or in-house ANSI domain expert.  If changes need to be made, go back to Step 4.", 
            "title": "Step 6: Release Checklist"
        }, 
        {
            "location": "/hardware/mech_eng/#step-7-build-rc-articles-prodmgr-hwte", 
            "text": "Once a part releases as RC, we send the release package to the CMS for a request to quote for manufacture.   RC articles are not needed if the same outside CM has manufactured the prototype, and the same design has been approved for production with no changes. If either the design or manufacturing process changes from the approved prototype, RC articles are needed.    Email the ProdMgr to request an RC build along with requested turnaround time and quantity.    Hand off the document package to the Production Manager.   ProdMgr will place RFQs and PO.  RC articles will be made at a CMS.   The CMS is not allowed to make any changes to this package without first looping back to Codeshelf to obtain an approved ECO.  If we receive an ECR from the CMS, we review it and decide if we will approve the change.  If we agree to approve the change, then we capture that change in the appropriate documents (BOM, ECO, etc.) and re-release the product with these changes, incrementing the tag.   Hand off the document package to the Hardware Test Engineer when RC Articles are complete and delivered.   RC articles will be delivered to the HWTE. In the absence of the HWTE, RC articles are delivered to the design engineer.  When the device comes back from the CMS, it gets assembled by the prototype shop (if not already assembled by the outside CMS).  ProdMgr checks whether CMS has made any modifications to the design. If so, the design needs to be revised and re-versioned.", 
            "title": "Step 7: Build RC Articles (ProdMgr &amp; HWTE)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-8-test-and-validate-rc-articles-hwte-designer", 
            "text": "RC articles must be approved by the HWTE / designer in order to release for production.   Hand off the document package to the Hardware Test Engineer.   Print the Basic Hardware Testing Criteria and review with a pen.  Run all of the relevant tests set out in the design process to validate that the article is correct.   If the HWTE approves the device for production then proceed to step 9, otherwise go back to step 4.\nStep 9: Release Tag (Designer)  Hand off the document package to the designer/engineer.  When RC articles are proven good and approved for production:   Tag the final commit with with the appropriate production version number.    Github automatically notifies ProdMgr of the release.   Hand off the document package to the Production Manager.", 
            "title": "Step 8: Test and Validate RC Articles (HWTE &amp; Designer)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-10-release-announcement-prodmgr", 
            "text": "Issue a release announcement\nUpdate the Current and Planned Hardware Releases and Products in need of release documents.  The item is then cleared for ongoing production.", 
            "title": "Step 10: Release Announcement (ProdMgr)"
        }, 
        {
            "location": "/hardware/mech_eng/#step-11-post-release-review-prodmgr", 
            "text": "Review the release process with the Engineer  Change the release process document as needed  Change the release checklists as needed", 
            "title": "Step 11: Post Release Review (ProdMgr)"
        }, 
        {
            "location": "/hardware/meche_checklist/", 
            "text": "MechE Release Checklist\n\n\nCheck that all files are included in GitHub pre-release package:\n\n\n\n\nDoes each part have its own folder named after it?\n\n\nDoes each folder contain a drawing in PDF format, along with the appropriate derivative file (EPS, DXF, SLDPRT, STEP, etc.) format(s)? Refer to the tables in Step 4 of the 3. Mechanicals Development and Release Process if unsure.\n\n\nFor lasercut parts, is there a README file containing the appropriate info on materials, thicknesses, sheet size, production file name, and any vendor specific information?\n\n\n\n\nDownload the pre-release package from GitHub\n\n\nPrint all current drawings from GitHub download\n\n\n\n\nIf drawings have been revised, print previews. \n\n\nLimit dimensions should be used on all individually dimensioned toleranced parts.\n\n\nDimensions should not be duplicated or the same information given in two different ways and no dimensions should be given except those needed to produce or inspect the part.\n\n\nDimensions should be given between points or surfaces that have a functional relation to each other or that control the location of mating parts.\n\n\nDimensioning to hidden lines should be avoided whenever possible.\n\n\nDimensions applying to two adjacent views should be placed between the views if possible.\n\n\nThe longer dimensions should be placed outside all intermediate dimensions so that dimension lines will not cross extension lines.\n\n\n\n\n\n\nDo drawings effectively communicate essential tolerance features?\n\n\nDimensions\n\n\nMaterials\n\n\nTolerances\n\n\nReview Version Numbers/Revision Numbers\n\n\n\n\n\n\n\n\nReview BOM Documents from GitHub download\n\n\n\n\nCheck that the BOM has the following data:\n\n\nIs the project name showing in the BOM's header?\n\n\nAre all parts required to build the device represented?\n\n\nAre parts quantities correct?\n\n\nAre the dates current and correct?\n\n\nAre the manufacturer's part numbers present and correct?\n\n\nAre the Codeshelf part names present and correct?\n\n\nAre feedstocks and their associated dimensions present and correct?\n\n\n\n\n\n\nDoes the BOM contain all of the sourcing data needed to acquire the parts?\n\n\nDoes the BOM contain feedstock and dimensions?\n\n\nDoes each part have a name that follows the Codeshelf Part Number Scheme?\n\n\n\n\nReview ECO Documents from GitHub download\n\n\n\n\nDoes the current version number\u2019s row in the spreadsheet describe all changes to this version/revision?\n\n\nDoes the ECO reflect all design changes noted since the previous release and those noted in the commit messages?\n\n\n\n\nReview README files (found in production files folders of lasercut parts) from GitHub download\n\n\n\n\nIs the required material listed?\n\n\nIs the thickness of the material called out?\n\n\nIs all vendor-specific information listed (eg stock sizes, file names, sheet size, part yield, etc.)\n\n\n\n\nCross check Drawings/BOM/ECO from GitHub download\n\n\n\n\nDo all instances of version numbers/revision letters agree?\n\n\nDrawings (found in drawing title block)\n\n\nDo drawing / Part numbers and version numbers agree with the title blocks on the drawings?\n\n\n\n\n\n\nBOM (Product Number, also in Drawing/Part No. fields)\n\n\nDoes the tag on the BOM agree with the release ID row on the ECO?\n\n\n\n\n\n\n\n\nPOST-RELEASE:\n\n\n\n\nHas the checklist been checked for necessary items/redundant items?", 
            "title": "Release CheckList"
        }, 
        {
            "location": "/hardware/meche_checklist/#meche-release-checklist", 
            "text": "", 
            "title": "MechE Release Checklist"
        }, 
        {
            "location": "/hardware/meche_checklist/#check-that-all-files-are-included-in-github-pre-release-package", 
            "text": "Does each part have its own folder named after it?  Does each folder contain a drawing in PDF format, along with the appropriate derivative file (EPS, DXF, SLDPRT, STEP, etc.) format(s)? Refer to the tables in Step 4 of the 3. Mechanicals Development and Release Process if unsure.  For lasercut parts, is there a README file containing the appropriate info on materials, thicknesses, sheet size, production file name, and any vendor specific information?", 
            "title": "Check that all files are included in GitHub pre-release package:"
        }, 
        {
            "location": "/hardware/meche_checklist/#download-the-pre-release-package-from-github", 
            "text": "", 
            "title": "Download the pre-release package from GitHub"
        }, 
        {
            "location": "/hardware/meche_checklist/#print-all-current-drawings-from-github-download", 
            "text": "If drawings have been revised, print previews.   Limit dimensions should be used on all individually dimensioned toleranced parts.  Dimensions should not be duplicated or the same information given in two different ways and no dimensions should be given except those needed to produce or inspect the part.  Dimensions should be given between points or surfaces that have a functional relation to each other or that control the location of mating parts.  Dimensioning to hidden lines should be avoided whenever possible.  Dimensions applying to two adjacent views should be placed between the views if possible.  The longer dimensions should be placed outside all intermediate dimensions so that dimension lines will not cross extension lines.    Do drawings effectively communicate essential tolerance features?  Dimensions  Materials  Tolerances  Review Version Numbers/Revision Numbers", 
            "title": "Print all current drawings from GitHub download"
        }, 
        {
            "location": "/hardware/meche_checklist/#review-bom-documents-from-github-download", 
            "text": "Check that the BOM has the following data:  Is the project name showing in the BOM's header?  Are all parts required to build the device represented?  Are parts quantities correct?  Are the dates current and correct?  Are the manufacturer's part numbers present and correct?  Are the Codeshelf part names present and correct?  Are feedstocks and their associated dimensions present and correct?    Does the BOM contain all of the sourcing data needed to acquire the parts?  Does the BOM contain feedstock and dimensions?  Does each part have a name that follows the Codeshelf Part Number Scheme?", 
            "title": "Review BOM Documents from GitHub download"
        }, 
        {
            "location": "/hardware/meche_checklist/#review-eco-documents-from-github-download", 
            "text": "Does the current version number\u2019s row in the spreadsheet describe all changes to this version/revision?  Does the ECO reflect all design changes noted since the previous release and those noted in the commit messages?", 
            "title": "Review ECO Documents from GitHub download"
        }, 
        {
            "location": "/hardware/meche_checklist/#review-readme-files-found-in-production-files-folders-of-lasercut-parts-from-github-download", 
            "text": "Is the required material listed?  Is the thickness of the material called out?  Is all vendor-specific information listed (eg stock sizes, file names, sheet size, part yield, etc.)", 
            "title": "Review README files (found in production files folders of lasercut parts) from GitHub download"
        }, 
        {
            "location": "/hardware/meche_checklist/#cross-check-drawingsbomeco-from-github-download", 
            "text": "Do all instances of version numbers/revision letters agree?  Drawings (found in drawing title block)  Do drawing / Part numbers and version numbers agree with the title blocks on the drawings?    BOM (Product Number, also in Drawing/Part No. fields)  Does the tag on the BOM agree with the release ID row on the ECO?", 
            "title": "Cross check Drawings/BOM/ECO from GitHub download"
        }, 
        {
            "location": "/hardware/meche_checklist/#post-release", 
            "text": "Has the checklist been checked for necessary items/redundant items?", 
            "title": "POST-RELEASE:"
        }, 
        {
            "location": "/hardware/mech_eng_test/", 
            "text": "Design Test\n\n\n\n\nDo screws back out?\n\n\nIf special tools are needed, do we have enough of them? Torx, Allen, etc?\n\n\nDuring assembly\n\n\nDoes it feel solid?\n\n\nIf there are points of weakness, where are they?\n\n\nAnything obviously wrong should be noted\n\n\nDo the buttons actuate? Anything interfering with them?\n\n\nStatic Electricity testing\n\n\nElectrical shorts through housing?\n\n\nDo cables fit securely?\n\n\nDo they break contact?\n\n\nDoes the housing interfere with cable connections?\n\n\nSqueeze the device and look for any changes in behavior or fit/finish\n\n\nShake the device, listen for loose PCB or other parts\n\n\nIf the device has mounting affordances, mount it\n\n\nHow much force is required to remove it?\n\n\nHow much force is needed to mount it?\n\n\nCan it be twisted off of the mounting surface/area?\n\n\nHow do finishes hold up with abrasion?\n\n\nIs the device easily cleanable?\n\n\nFingerprints?\n\n\nDo housing components assemble/align well?\n\n\nHas intended design symmetry been preserved?\n\n\nAre corners broken? Any obvious burrs?\n\n\nAre fillets present?\n\n\nHoles in housing for connectors\n\n\nWhat is the appropriate torque application for screws? Are electric screwdrivers not advised?\n\n\n\n\nCAD Sanity Check\n\n\nPrototyping\n\n\n\n\nHave we made sure that all parts are final production units and not holdovers from prototyping?\n\n\n\n\nVendor Acceptance/QA\n\n\nTolerances and Standards\n\n\n\n\n\n\nMeasure Against Drawings, check against Codeshelf standard tolerances (on drawings)\n\n\n\n\nThickness\n\n\nHeight\n\n\nLength\n\n\nWidth\n\n\n\n\n\n\n\n\nFinish Examination\n\n\n\n\nAny surface finish callouts on drawings should be checked against finished parts\n\n\nNote any obvious mechanical flaws on mating surfaces\n\n\nNote cracks, flaws or imperfections\n\n\nCorners rounded/broken? Check for sharp edges\n\n\nLook for mars, scratches\n\n\n\n\n\n\n\n\nMechanical Fit and Alignment\n\n\n\n\nTest-fit mating parts and examine for alignment issues\n\n\n\n\n\n\nAssembly Tests\n\n\nAssemble fully\n\n\nTighten screws\n\n\nCheck for gaps in mating parts\n\n\nHousing ports/holes for connectors\n\n\nHow close is the fit around the cable?\n\n\nDoes the cable break contact?\n\n\n\n\n\n\nFunctional Tests\n\n\nButtons\n\n\nDo buttons function as intended, mechanically?\n\n\nAre they aligned in their openings?\n\n\n\n\n\n\n\n\n\n\nScreens\n\n\nIs the screen aligned with the edges of the housing?\n\n\nAre all pixels visible?\n\n\n\n\n\n\nAntennae\n\n\nScrews/fasteners\n\n\nDo screws back out?\n\n\nWhat happens when you overtighten them?\n\n\n\n\n\n\nEndurance Tests\n\n\nDrop Test\n\n\nDrop device from the height it is normally used from/mounted at\n\n\n\n\n\n\nShake Test\n\n\nVigorously shake the device and listen for rattles and other sounds, note them\n\n\n\n\n\n\nCable pull/Twist\n\n\nInsert cables and pull them out. \n\n\nNote how much force is needed\n\n\nNote any breakage or loose parts\n\n\n\n\n\n\nSqueeze Test\n\n\nSqueeze the assembled device with your hands and look for gaps in the housing, note any sounds or breakage\n\n\n\n\n\n\n\n\nMeasurements Data Verified/Collected:\n\n\nFinish Notes\n\n\nAssembly Notes\n\n\nMechanical Tests Performed", 
            "title": "Test Criteria"
        }, 
        {
            "location": "/hardware/mech_eng_test/#design-test", 
            "text": "Do screws back out?  If special tools are needed, do we have enough of them? Torx, Allen, etc?  During assembly  Does it feel solid?  If there are points of weakness, where are they?  Anything obviously wrong should be noted  Do the buttons actuate? Anything interfering with them?  Static Electricity testing  Electrical shorts through housing?  Do cables fit securely?  Do they break contact?  Does the housing interfere with cable connections?  Squeeze the device and look for any changes in behavior or fit/finish  Shake the device, listen for loose PCB or other parts  If the device has mounting affordances, mount it  How much force is required to remove it?  How much force is needed to mount it?  Can it be twisted off of the mounting surface/area?  How do finishes hold up with abrasion?  Is the device easily cleanable?  Fingerprints?  Do housing components assemble/align well?  Has intended design symmetry been preserved?  Are corners broken? Any obvious burrs?  Are fillets present?  Holes in housing for connectors  What is the appropriate torque application for screws? Are electric screwdrivers not advised?", 
            "title": "Design Test"
        }, 
        {
            "location": "/hardware/mech_eng_test/#cad-sanity-check", 
            "text": "", 
            "title": "CAD Sanity Check"
        }, 
        {
            "location": "/hardware/mech_eng_test/#prototyping", 
            "text": "Have we made sure that all parts are final production units and not holdovers from prototyping?", 
            "title": "Prototyping"
        }, 
        {
            "location": "/hardware/mech_eng_test/#vendor-acceptanceqa", 
            "text": "", 
            "title": "Vendor Acceptance/QA"
        }, 
        {
            "location": "/hardware/mech_eng_test/#tolerances-and-standards", 
            "text": "Measure Against Drawings, check against Codeshelf standard tolerances (on drawings)   Thickness  Height  Length  Width     Finish Examination   Any surface finish callouts on drawings should be checked against finished parts  Note any obvious mechanical flaws on mating surfaces  Note cracks, flaws or imperfections  Corners rounded/broken? Check for sharp edges  Look for mars, scratches     Mechanical Fit and Alignment   Test-fit mating parts and examine for alignment issues    Assembly Tests  Assemble fully  Tighten screws  Check for gaps in mating parts  Housing ports/holes for connectors  How close is the fit around the cable?  Does the cable break contact?    Functional Tests  Buttons  Do buttons function as intended, mechanically?  Are they aligned in their openings?      Screens  Is the screen aligned with the edges of the housing?  Are all pixels visible?    Antennae  Screws/fasteners  Do screws back out?  What happens when you overtighten them?    Endurance Tests  Drop Test  Drop device from the height it is normally used from/mounted at    Shake Test  Vigorously shake the device and listen for rattles and other sounds, note them    Cable pull/Twist  Insert cables and pull them out.   Note how much force is needed  Note any breakage or loose parts    Squeeze Test  Squeeze the assembled device with your hands and look for gaps in the housing, note any sounds or breakage", 
            "title": "Tolerances and Standards"
        }, 
        {
            "location": "/hardware/mech_eng_test/#measurements-data-verifiedcollected", 
            "text": "", 
            "title": "Measurements Data Verified/Collected:"
        }, 
        {
            "location": "/hardware/mech_eng_test/#finish-notes", 
            "text": "", 
            "title": "Finish Notes"
        }, 
        {
            "location": "/hardware/mech_eng_test/#assembly-notes", 
            "text": "", 
            "title": "Assembly Notes"
        }, 
        {
            "location": "/hardware/mech_eng_test/#mechanical-tests-performed", 
            "text": "", 
            "title": "Mechanical Tests Performed"
        }, 
        {
            "location": "/hardware/process_improvement/", 
            "text": "Reminder: review with the following in mind\n\n\n\n\nEstablish baseline workload for releases so they can be used to plan future work\n\n\nIdentify highest friction areas that can be improved with substantial positive impact\n\n\nMake sure everyone is comfortable with the process and tools at hand\n\n\nShare tips with other teams to help each other improve their process.\n\n\n\n\nReview process through following lenses:\n\n\n\n\nAre there parts of the process that we can automate with a worthwhile outcome?\n\n\nAre there steps in the process that can be reworked, improved or eliminated (last resort)\n\n\nAre there things I personally need in order to proficiently complete the process or work that is better suited for someone else shared among teams?\n\n\nIs there anything missing from the process which would help ensure that our released products are correct and portable.\n\n\n\n\nFacts about GrabCAD:\n\n\n\n\nGrabCAD's position is that 2D drawings are dead, and they don't support them in any way other than making it possible to package PDFs along with 3D files when you get ready to submit them to a manufacturer via their Partner Spaces feature. There is no \"annotation layer\" in GrabCAD, nor do they make it possible to edit drawings in any of their tools. I have this in email from GrabCAD themselves.\n\n\nThey do have a 3D view with annotations you can add, but as someone who's worked in a machine shop I sincerely question their usefulness (machine shops are likely to request PDFs for estimating purposes whether we use this tool or not). Very often prototyping machinists simply print and mark up the drawings. \n\n\nThe Partner Spaces could be useful, but all they do is provide a secure landing page with a download link for manufacturing partners. \n\n\nThey provide versioning, but it's not very flexible and doesn't work the way we do. It literally appends a version number to each save you upload to GrabCAD Workbench. It doesn't give us the option to use our own version number and revision scheme.\n\n\nAlso, there is a provision for creating BOMs. Also not terribly flexible, nor does it have very many features that we need. What it does is kick out a CSV file with the names of the files you've uploaded, with data about those. It won't filter the filetype out of the name when it creates the CSV.  It would take me longer to hand-edit one of these (I did try!) into a workable * BOM than it would be to simply copy-paste or work from a pre-built template of our making.\n\n\nThe things it does do well\n\n\nKeeping track of historical versions of a file (every save is captured). However, we already do a form of this with Git. I haven't yet looked into what happens when you work out of the Git folder with Solidworks yet, but I suspect it'll work fine.\n\n\nAllowing for visually checking differences between two versions of a 3D CAD file (Github doesn't do this - yet)\n\n\nThe things we were hoping to automate with it, BOMs and 2D drawings, are either not possible or more work than they're worth.\n\n\n\n\n\n\n\n\nFacts about Solidworks:\n\n\n\n\nThere are a couple of tools that could help us work more efficiently, but they are unlikely to have a huge impact on the amount of time that we spend making drawings to the degree that it's worth slowing down the modeling process. Also, they have up-front setup times that we will need to be conscious of.\n\n\nIt's possible to set up Solidworks to create BOMs that can be exported along with the drawings. This is probably a one-time endeavor, and will result in something that we can use over and over again. I'm not sure how long it would take to set up, but's unlikely to less than one day.\n\n\nIt's possible to build Solidworks models in such a way as to start the process of adding annotations while one is working in the model, long before the drawings are started. Although I haven't tried this technique out yet, my suspicion is that working in this way will slow down the modeling process enough to mitigate any time savings we might get from it on the back end (i.e. annotating and preparing 2D drawings after the modeling is done). \n\n\n\n\nThings that should go into current process:\n\n\n\n\nBOMs should be created and maintained from Solidworks (see risks/benefits below)\n\n\nExamine drawings in terms of what has changed, only test against what has changed STEP ADDED\n\n\nBring all CAD files together into the same place (GrabCAD?) and practice better \n more disciplined data hygiene STEP ADDED\n\n\nUse Github at the point of file creation to reduce shuttle time between machines STEP ADDED\n\n\nUpload files to GrabCAD STEP ADDED\n\n\nDiff files and folders STEP ADDED\n\n\n\n\nFor discussion and potential adoption:\n\n\n\n\nMECH Release Checklist Google Form\n\n\nCost \n\n\nMinimal\n\n\n\n\n\n\nBenefits\n\n\nspeed up and simplify the checklist process by gating out irrelevant steps in the process\n\n\n\n\n\n\nRisks\n\n\n\"Read With A Pen\" and \"No Gating\" are requirements of our current process. Should we re-examine this?\n\n\n\n\n\n\n\n\n\n\n\n\nBOM\n\n\n\n\nSolidworks \n\n\nSteps to a BOM\n        1. Do work in the model\n        2. Make changes\n        3. Changes to model are associative - no work necessary on BOM document\n        4. Print along with drawings\n\n\n\n\n\n\nBenefits \n\n\nVery little work need be done if proper setup \n\n\nAssociative (BOM changes along with model)\n\n\n\n\n\n\nRisks\n\n\nCAD data used in production models must be 1:1 match to design intent (all parts must be the ones being specified)\n\n\nErrors might be time-consuming to correct\n\n\n\n\n\n\nRequirements\n\n\nBOM template must be created\n\n\nProject CAD data must be robust (part numbers correct, etc.)\n\n\nIn order to evaluate potential time savings, it might be necessary to create a prototype BOM \n\n\n\n\n\n\n\n\n\n\n\n\nSolidworks Design Checker \n\n\n\n\nhttp://www.solidworks.com/sw/products/3d-cad/cad-standards-checking-and-drawing-comparison.htm\n\n\nCost\n\n\nUpgrade to Solidworks Professional\n\n\nSetup time for templates \n\n\n\n\n\n\nTime Savings\n\n\nReducing the drawing examination to a push-button process\n\n\n\n\n\n\nBenefits\n\n\nSimplifying the process of checking drawings dramatically\n\n\n\n\n\n\nRisks\n        It might take a while to figure out a good set of rules to build in to the Design Checker\n        Upfront build might be expensive in terms of labor\n        Only checks what you tell it to check\n\n\n\n\n\n\n\n\nWhat's it going to take to implement this? What's the cost? What's the benefit? What's the risk?\n\n\n\n\nHow is the process testable against our baseline?\n\n\nHow do these changes impact time to completion?\n\n\n\n\nDocuments and associated tools:\n\n\n\n\nDrawings\n\n\nCreated using Solidworks\n\n\n\n\n\n\nBOM\n\n\nCreated/updated in LibreOffice\n\n\n\n\n\n\nECO\n\n\nCreated/updated in LibreOffice\n\n\n\n\n\n\nREADME files\n\n\nCreated/updated in LibreOffice\n\n\n\n\n\n\n\n\nMech release automation\n\n\nSuggestions:\n\n for 2D Drawings\n    * Set up templates in such a way as to minimize front-end work\n\n Model-Based Definition (3D PDF)\n    * This is a method of CAD model data output that creates a package that is highly portable\n    * http://www.solidworks.com/sw/products/technical-communication/solidworks-mbd.htm\n\n\nDesign Checker is an add-in for Solidworks Professional that allows for rule-based 'diff' operations on Solidworks drawings. Requires that an operator identifies the parts of the drawing that need to conform to standards (e.g. dimensions can not cross one another, can not be less than 3/8\" from the model itself, etc.)\n\n\nCurrently, we would need a license upgrade to Professional to try this add-in. I might need to speak with a Solidworks Rep in order to determine if this is a good fit for our needs/worth the upgrade.\n\n\nAdditionally, Professional comes with a huge CAD Toolbox that has thousands of pre-built fasteners (which would speed things up - the operator would spend far less time searching McMaster for CAD files)\n\n\nhttp://www.solidworks.com/sw/products/3d-cad/cad-standards-checking-and-drawing-comparison.htm\n\n\nhttp://www.solidworks.com/sw/products/3d-cad/cad-library.htm\nMech Acceptance/Conformance Testing\n\n\nBasic Hardware Testing Criteria\n\n\nDocument here:\n\n\nhttps://docs.google.com/document/d/1ZpMAv2LG8mZiS7Jtf1E0wzCPsQbAyp7QIwp0flFzmjo/edit\n\n\nCAD standards\n\n\nSolidworks models built for production purposes ought to fulfill the following criteria:\n\n\n\n\n1:1 match with production object (This ensures that the BOM and other associated files are accurate)\n\n\nDesign work is complete before Solidworks work is begun (dimensions are final, any formal studies are complete, etc.)\n\n\nSolidworks models are uploaded to GrabCAD\n\n\nFor change-tracking\n\n\nTo enable multiple users to work on the models concurrently/separately", 
            "title": "Process Improvement"
        }, 
        {
            "location": "/hardware/process_improvement/#reminder-review-with-the-following-in-mind", 
            "text": "Establish baseline workload for releases so they can be used to plan future work  Identify highest friction areas that can be improved with substantial positive impact  Make sure everyone is comfortable with the process and tools at hand  Share tips with other teams to help each other improve their process.", 
            "title": "Reminder: review with the following in mind"
        }, 
        {
            "location": "/hardware/process_improvement/#review-process-through-following-lenses", 
            "text": "Are there parts of the process that we can automate with a worthwhile outcome?  Are there steps in the process that can be reworked, improved or eliminated (last resort)  Are there things I personally need in order to proficiently complete the process or work that is better suited for someone else shared among teams?  Is there anything missing from the process which would help ensure that our released products are correct and portable.", 
            "title": "Review process through following lenses:"
        }, 
        {
            "location": "/hardware/process_improvement/#facts-about-grabcad", 
            "text": "GrabCAD's position is that 2D drawings are dead, and they don't support them in any way other than making it possible to package PDFs along with 3D files when you get ready to submit them to a manufacturer via their Partner Spaces feature. There is no \"annotation layer\" in GrabCAD, nor do they make it possible to edit drawings in any of their tools. I have this in email from GrabCAD themselves.  They do have a 3D view with annotations you can add, but as someone who's worked in a machine shop I sincerely question their usefulness (machine shops are likely to request PDFs for estimating purposes whether we use this tool or not). Very often prototyping machinists simply print and mark up the drawings.   The Partner Spaces could be useful, but all they do is provide a secure landing page with a download link for manufacturing partners.   They provide versioning, but it's not very flexible and doesn't work the way we do. It literally appends a version number to each save you upload to GrabCAD Workbench. It doesn't give us the option to use our own version number and revision scheme.  Also, there is a provision for creating BOMs. Also not terribly flexible, nor does it have very many features that we need. What it does is kick out a CSV file with the names of the files you've uploaded, with data about those. It won't filter the filetype out of the name when it creates the CSV.  It would take me longer to hand-edit one of these (I did try!) into a workable * BOM than it would be to simply copy-paste or work from a pre-built template of our making.  The things it does do well  Keeping track of historical versions of a file (every save is captured). However, we already do a form of this with Git. I haven't yet looked into what happens when you work out of the Git folder with Solidworks yet, but I suspect it'll work fine.  Allowing for visually checking differences between two versions of a 3D CAD file (Github doesn't do this - yet)  The things we were hoping to automate with it, BOMs and 2D drawings, are either not possible or more work than they're worth.", 
            "title": "Facts about GrabCAD:"
        }, 
        {
            "location": "/hardware/process_improvement/#facts-about-solidworks", 
            "text": "There are a couple of tools that could help us work more efficiently, but they are unlikely to have a huge impact on the amount of time that we spend making drawings to the degree that it's worth slowing down the modeling process. Also, they have up-front setup times that we will need to be conscious of.  It's possible to set up Solidworks to create BOMs that can be exported along with the drawings. This is probably a one-time endeavor, and will result in something that we can use over and over again. I'm not sure how long it would take to set up, but's unlikely to less than one day.  It's possible to build Solidworks models in such a way as to start the process of adding annotations while one is working in the model, long before the drawings are started. Although I haven't tried this technique out yet, my suspicion is that working in this way will slow down the modeling process enough to mitigate any time savings we might get from it on the back end (i.e. annotating and preparing 2D drawings after the modeling is done).", 
            "title": "Facts about Solidworks:"
        }, 
        {
            "location": "/hardware/process_improvement/#things-that-should-go-into-current-process", 
            "text": "BOMs should be created and maintained from Solidworks (see risks/benefits below)  Examine drawings in terms of what has changed, only test against what has changed STEP ADDED  Bring all CAD files together into the same place (GrabCAD?) and practice better   more disciplined data hygiene STEP ADDED  Use Github at the point of file creation to reduce shuttle time between machines STEP ADDED  Upload files to GrabCAD STEP ADDED  Diff files and folders STEP ADDED", 
            "title": "Things that should go into current process:"
        }, 
        {
            "location": "/hardware/process_improvement/#for-discussion-and-potential-adoption", 
            "text": "MECH Release Checklist Google Form  Cost   Minimal    Benefits  speed up and simplify the checklist process by gating out irrelevant steps in the process    Risks  \"Read With A Pen\" and \"No Gating\" are requirements of our current process. Should we re-examine this?       BOM   Solidworks   Steps to a BOM\n        1. Do work in the model\n        2. Make changes\n        3. Changes to model are associative - no work necessary on BOM document\n        4. Print along with drawings    Benefits   Very little work need be done if proper setup   Associative (BOM changes along with model)    Risks  CAD data used in production models must be 1:1 match to design intent (all parts must be the ones being specified)  Errors might be time-consuming to correct    Requirements  BOM template must be created  Project CAD data must be robust (part numbers correct, etc.)  In order to evaluate potential time savings, it might be necessary to create a prototype BOM        Solidworks Design Checker    http://www.solidworks.com/sw/products/3d-cad/cad-standards-checking-and-drawing-comparison.htm  Cost  Upgrade to Solidworks Professional  Setup time for templates     Time Savings  Reducing the drawing examination to a push-button process    Benefits  Simplifying the process of checking drawings dramatically    Risks\n        It might take a while to figure out a good set of rules to build in to the Design Checker\n        Upfront build might be expensive in terms of labor\n        Only checks what you tell it to check     What's it going to take to implement this? What's the cost? What's the benefit? What's the risk?   How is the process testable against our baseline?  How do these changes impact time to completion?   Documents and associated tools:   Drawings  Created using Solidworks    BOM  Created/updated in LibreOffice    ECO  Created/updated in LibreOffice    README files  Created/updated in LibreOffice     Mech release automation  Suggestions:  for 2D Drawings\n    * Set up templates in such a way as to minimize front-end work  Model-Based Definition (3D PDF)\n    * This is a method of CAD model data output that creates a package that is highly portable\n    * http://www.solidworks.com/sw/products/technical-communication/solidworks-mbd.htm  Design Checker is an add-in for Solidworks Professional that allows for rule-based 'diff' operations on Solidworks drawings. Requires that an operator identifies the parts of the drawing that need to conform to standards (e.g. dimensions can not cross one another, can not be less than 3/8\" from the model itself, etc.)  Currently, we would need a license upgrade to Professional to try this add-in. I might need to speak with a Solidworks Rep in order to determine if this is a good fit for our needs/worth the upgrade.  Additionally, Professional comes with a huge CAD Toolbox that has thousands of pre-built fasteners (which would speed things up - the operator would spend far less time searching McMaster for CAD files)  http://www.solidworks.com/sw/products/3d-cad/cad-standards-checking-and-drawing-comparison.htm  http://www.solidworks.com/sw/products/3d-cad/cad-library.htm\nMech Acceptance/Conformance Testing  Basic Hardware Testing Criteria  Document here:  https://docs.google.com/document/d/1ZpMAv2LG8mZiS7Jtf1E0wzCPsQbAyp7QIwp0flFzmjo/edit", 
            "title": "For discussion and potential adoption:"
        }, 
        {
            "location": "/hardware/process_improvement/#cad-standards", 
            "text": "Solidworks models built for production purposes ought to fulfill the following criteria:   1:1 match with production object (This ensures that the BOM and other associated files are accurate)  Design work is complete before Solidworks work is begun (dimensions are final, any formal studies are complete, etc.)  Solidworks models are uploaded to GrabCAD  For change-tracking  To enable multiple users to work on the models concurrently/separately", 
            "title": "CAD standards"
        }, 
        {
            "location": "/firmware/dev/", 
            "text": "", 
            "title": "Firmware Dev"
        }, 
        {
            "location": "/firmware/checklist/", 
            "text": "", 
            "title": "Release Checklist"
        }, 
        {
            "location": "/vendor/trust/", 
            "text": "", 
            "title": "Trust as a Tool"
        }, 
        {
            "location": "/vendor/fab/", 
            "text": "", 
            "title": "Assembly, Fab Notes"
        }, 
        {
            "location": "/vendor/eco/", 
            "text": "", 
            "title": "ECOs - Yes, No, Maybe"
        }, 
        {
            "location": "/test/monkey/", 
            "text": "Automated Monkey Testing (AMT)\n\n\nA continuous and complete simulation of user interactions against a design. You run automated monkey tests against each commit using the continuous integration (CI) system. \n\n\nThe alternative, perhaps most common way to accomplish this kind of testing, is human-scripted testing. \n\n\nDon't do that!\n \n\n\nHuman-driven, scripted testing is mindless and \nboooring\n, and the more someone runs them, the more numb they become. This is a recipe for tests that hardly ever get run, and when they do get run, the effort is generally perfunctory and sloppy.\n\n\nEven your first design iteration should be testable\n\n\n\n\nWhen you engage in \nany\n design, you must start with the question: \"what's testable about this design?\"\n\n\n\n\nThe right way to test is automation: continuous integration, unit and end-to-end tests. You'll never get to automated testing unless the tests are part of the design process. A side benefit of doing this in the design process is that when you send a revision to mass production, your vendor partners have a way to validate their work as part of the QA/acceptance testing. (You, really, really, really don't want to race around trying to create some kind of manufacturing acceptance test just before manufacture because it will force you to redesign the PCB and that will take almost as much work as the original development!)\n\n\nTest criteria fall into four broad categories:\n\n\nUsability\n\n\nThe whole reason to follow the ZeroDiff process is to rapidly iterate on your design assumptions. The design stories that flow out of the sprints should represent the base criteria that validates if the design meets user need. As soon as a prototype emerges from the shop, the test team needs to validate the prototype against these stories.\n\n\nSurvivability\n\n\nOne problem with the \"works-like/looks-like\" development model is there is no way to know how difficult it will be to design a production version that can survive contact with users. Breaking the production process into two phases like this will take more total development hours, and it creates a lot of uncertainty about how long it will actually take to get to market.\n\n\nManufacturability\n\n\nEach time the prototype team produces a design iteration, they should perform a design-for-manufacture (DMF) review. Each iteration is a chance for the production team to inform the design team of ways to improve costs, simplicity, reliability and quality. One nice thing about the ZeroDiff process is that small changes like this are easy to digest, so the two teams can make a lot of progress without conflict.\n\n\nReliability\n\n\nProbably the most unnerving part of hardware development are transient field failures. E.g. glitches, reboots, freezes, bricking or random weirdness in the user experience. The best way to defend against transient failures is to force the combined firmware and hardware through automated testing for every commit.\n\n\nSteps to get to AMT\n\n\nBurn-in/Manufacture Jigs\n\n\nProbably the easiest way to start down the road to AMT is to start with a test/flash jig for any new design. Resist the temptation to simply place a JTAG/SWD header on the PCB that fits your programming pod. It will be difficult for an outside vendor partner to reach any meaningful scale if they require access to a programming pod on the manufacturing floor. Even if you don't have the ability to fabricate a jig now, the presence of the flash/debug bus as test points means you can more easily automate this for production later without having to redesign the board. Whether the device ever reaches scaled production or not, it costs almost nothing to add this capability in the beginning.\n\n\nTest Harness and Test Points\n\n\nClosely related to burn-in jigs are test points. Any I/O, button, switch, sensor or communication bus should have a corresponding test point (pad) accessible somewhere on the PCB. These should all be on the same side, probably on what would be the \"bottom\" if the device has a strong user-facing side. The test harness can use pogo-pins to reach these test points. Even if you don't have the capability to fabricate a test harness/jig, adding these test points now allows you easily incorporate a test harness later without having to redesign the board.\n\n\nEventually you want these test points to drive automated tests that simulate user behaviors to test on-board subsystems like communications or sensor readings. The same automated, scripted tests you use in AMT work for manufacturing validation and QA. The assembly line worker should be able to push the completed device into a harness and press a button that flashes the device and runs a validation battery that results in a go/no-go indication for the assembly worker.\n\n\nScripted Development Environment\n\n\nAlmost all firmware development toolchains now support scripted development. Embrace this early and integrate it into a continuous integration tool like TeamCity. This is not hard to do, and the benefits are enormous. Once the scripted testing is in place, your development team has a convenient place to hang firmware unit tests. Scripted testing is also a good place to hang automated monkey tests. Once you have even one of these automated tests, it's much easier for the team to add subsequent tests.\n\n\nReport Bugs as Unit Tests\n\n\nA good QA and development team is able to express bugs as unit or E2E tests that fail. Having a place to add these tests to automated testing means that you can get coverage against regressions or closely related failures.", 
            "title": "Automated Monkey Tests"
        }, 
        {
            "location": "/test/monkey/#automated-monkey-testing-amt", 
            "text": "A continuous and complete simulation of user interactions against a design. You run automated monkey tests against each commit using the continuous integration (CI) system.   The alternative, perhaps most common way to accomplish this kind of testing, is human-scripted testing.   Don't do that!    Human-driven, scripted testing is mindless and  boooring , and the more someone runs them, the more numb they become. This is a recipe for tests that hardly ever get run, and when they do get run, the effort is generally perfunctory and sloppy.", 
            "title": "Automated Monkey Testing (AMT)"
        }, 
        {
            "location": "/test/monkey/#even-your-first-design-iteration-should-be-testable", 
            "text": "When you engage in  any  design, you must start with the question: \"what's testable about this design?\"   The right way to test is automation: continuous integration, unit and end-to-end tests. You'll never get to automated testing unless the tests are part of the design process. A side benefit of doing this in the design process is that when you send a revision to mass production, your vendor partners have a way to validate their work as part of the QA/acceptance testing. (You, really, really, really don't want to race around trying to create some kind of manufacturing acceptance test just before manufacture because it will force you to redesign the PCB and that will take almost as much work as the original development!)", 
            "title": "Even your first design iteration should be testable"
        }, 
        {
            "location": "/test/monkey/#test-criteria-fall-into-four-broad-categories", 
            "text": "", 
            "title": "Test criteria fall into four broad categories:"
        }, 
        {
            "location": "/test/monkey/#usability", 
            "text": "The whole reason to follow the ZeroDiff process is to rapidly iterate on your design assumptions. The design stories that flow out of the sprints should represent the base criteria that validates if the design meets user need. As soon as a prototype emerges from the shop, the test team needs to validate the prototype against these stories.", 
            "title": "Usability"
        }, 
        {
            "location": "/test/monkey/#survivability", 
            "text": "One problem with the \"works-like/looks-like\" development model is there is no way to know how difficult it will be to design a production version that can survive contact with users. Breaking the production process into two phases like this will take more total development hours, and it creates a lot of uncertainty about how long it will actually take to get to market.", 
            "title": "Survivability"
        }, 
        {
            "location": "/test/monkey/#manufacturability", 
            "text": "Each time the prototype team produces a design iteration, they should perform a design-for-manufacture (DMF) review. Each iteration is a chance for the production team to inform the design team of ways to improve costs, simplicity, reliability and quality. One nice thing about the ZeroDiff process is that small changes like this are easy to digest, so the two teams can make a lot of progress without conflict.", 
            "title": "Manufacturability"
        }, 
        {
            "location": "/test/monkey/#reliability", 
            "text": "Probably the most unnerving part of hardware development are transient field failures. E.g. glitches, reboots, freezes, bricking or random weirdness in the user experience. The best way to defend against transient failures is to force the combined firmware and hardware through automated testing for every commit.", 
            "title": "Reliability"
        }, 
        {
            "location": "/test/monkey/#steps-to-get-to-amt", 
            "text": "", 
            "title": "Steps to get to AMT"
        }, 
        {
            "location": "/test/monkey/#burn-inmanufacture-jigs", 
            "text": "Probably the easiest way to start down the road to AMT is to start with a test/flash jig for any new design. Resist the temptation to simply place a JTAG/SWD header on the PCB that fits your programming pod. It will be difficult for an outside vendor partner to reach any meaningful scale if they require access to a programming pod on the manufacturing floor. Even if you don't have the ability to fabricate a jig now, the presence of the flash/debug bus as test points means you can more easily automate this for production later without having to redesign the board. Whether the device ever reaches scaled production or not, it costs almost nothing to add this capability in the beginning.", 
            "title": "Burn-in/Manufacture Jigs"
        }, 
        {
            "location": "/test/monkey/#test-harness-and-test-points", 
            "text": "Closely related to burn-in jigs are test points. Any I/O, button, switch, sensor or communication bus should have a corresponding test point (pad) accessible somewhere on the PCB. These should all be on the same side, probably on what would be the \"bottom\" if the device has a strong user-facing side. The test harness can use pogo-pins to reach these test points. Even if you don't have the capability to fabricate a test harness/jig, adding these test points now allows you easily incorporate a test harness later without having to redesign the board.  Eventually you want these test points to drive automated tests that simulate user behaviors to test on-board subsystems like communications or sensor readings. The same automated, scripted tests you use in AMT work for manufacturing validation and QA. The assembly line worker should be able to push the completed device into a harness and press a button that flashes the device and runs a validation battery that results in a go/no-go indication for the assembly worker.", 
            "title": "Test Harness and Test Points"
        }, 
        {
            "location": "/test/monkey/#scripted-development-environment", 
            "text": "Almost all firmware development toolchains now support scripted development. Embrace this early and integrate it into a continuous integration tool like TeamCity. This is not hard to do, and the benefits are enormous. Once the scripted testing is in place, your development team has a convenient place to hang firmware unit tests. Scripted testing is also a good place to hang automated monkey tests. Once you have even one of these automated tests, it's much easier for the team to add subsequent tests.", 
            "title": "Scripted Development Environment"
        }, 
        {
            "location": "/test/monkey/#report-bugs-as-unit-tests", 
            "text": "A good QA and development team is able to express bugs as unit or E2E tests that fail. Having a place to add these tests to automated testing means that you can get coverage against regressions or closely related failures.", 
            "title": "Report Bugs as Unit Tests"
        }, 
        {
            "location": "/glossary/", 
            "text": "Glossary\n\n\n\n\n\n\n\n\nTerm\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nRaw Material\n\n\nAny 3rd party item that we purchase and store unaltered.\n\n\nLED strips\n\n\n\n\n\n\nValue Add\n\n\nA manufacture step or process where Codeshelf modifies one or more raw materials into a WIP or finished good.\n\n\nCut holes in NEMA enclosures\n\n\n\n\n\n\nWork In Process (WIP)\n\n\nRaw materials (or other WIP) that have been through a value-add step.\n\n\nNEMA enclosures with holes cut in them\n\n\n\n\n\n\nFinished Good\n\n\nA complete item ready for installation or sale.\n\n\nAisle Controller\n\n\n\n\n\n\nKitting\n\n\nCombining raw material and WIP into a kit to send to a value add step or to a customer.\n\n\nA box of parts to make one or more CHEs\n\n\n\n\n\n\nGerber File\n\n\nA machine file used to generate PCB copper layers.\n\n\n\n\n\n\n\n\nExcellon (Drill) File\n\n\nA machine file used to generate PCB vias and holes.\n\n\n\n\n\n\n\n\nCentroid File\n\n\nA machine file used to show the centers of ICs placed on a PCB by a pick-and-place machine\n\n\n\n\n\n\n\n\nBill of Materials\n\n\nA list of component parts needed in a kit to build a WIP or finished good part.\n\n\nComponents needed to build a particular PCBA.\n\n\n\n\n\n\nPCB Stackup\n\n\nThe number of copper and fiberglass layers, the copper weights, solder mask type/color and silkscreen color.\n\n\n\n\n\n\n\n\nPCB Fabrication File\n\n\nInstructions on how to manufacture PCB files. Includes notes, UL data, clarifications, revisions, etc.\n\n\n\n\n\n\n\n\nAssembly File (Assy)\n\n\nComplete assembly instructions for a WIP or finished good item.  LED tube assembly instructions\n\n\n\n\n\n\n\n\nFlash/Test Jig\n\n\nA device used to optionally flash and then test a WIP or finished good item during manufacture.\n\n\n\n\n\n\n\n\nRelease\n\n\nAn official release of a design from engineering to production for manufacture.\n\n\n\n\n\n\n\n\nRevision/Version    A\n\n\nnamed, tracked change to a previous release.\n\n\n\n\n\n\n\n\nEngineering Change Order\n\n\nA document that details all of the changes between two revisions or versions.  It should reference the revision numbers and the changes made between each release.  The CMS is not allowed to make any changes to this package, including vendor or part substitutions, without first looping back to Codeshelf with an ECO.\n\n\n\n\n\n\n\n\nEngineering Change Request\n\n\nAn ECR is initiated by a CMS to suggest a change to a released device. The ECR initiates a process of discussion within the organization to determine the impact of a change and the best possible solution, potentially resulting in an ECO.\n\n\n\n\n\n\n\n\nRelease Package\n\n\nA set of immutable documents that specify how to manufacture and test a particular version of a WIP or finished good item.\n\n\n\n\n\n\n\n\nGit\n\n\nA revision system for tracking document versions through time\n\n\n\n\n\n\n\n\nGit commit\n\n\nA specific document version committed to git for tracking and sharing.\n\n\n\n\n\n\n\n\nGit tag\n\n\nA named tag associated with any git commit.\n\n\n\n\n\n\n\n\nEngineer\n\n\nDesign or production engineer\n\n\n\n\n\n\n\n\nHWTE\n\n\nHardware Test Engineer\n\n\n\n\n\n\n\n\nProdMgr\n\n\nProduction Manager\n\n\n\n\n\n\n\n\nAssembly File\n\n\nThis is a Word document with images that explains how to do any special assembly to and item.\n\n\n\n\n\n\n\n\nPCBAs\n\n\nMost of our boards can get built entirely in the pick-and-place robots, but if there is some unusual hand-assembly step, etc. then we need to include an assembly file to let the 3rd party manufacturers know how to do these steps.\n\n\n\n\n\n\n\n\nMechanicals\n\n\nMany of our housings are currently assembled in house, but for larger manufacturing runs we need to include an assembly file to let the 3rd party manufacturers know how to assemble the items. For mechanical releases this file may be a step-by-step instruction manual with images and text describing the assembly process.\n\n\n\n\n\n\n\n\nTest File\n\n\nThis is a Word document file that explains how to flash (optional) and test a WIP or finished goods item during manufacture.  This document is critical because it indicates our quality acceptance criteria from the manufacturer before they ship the part.  Any flaws found after delivery are expensive to resolve and may cost us instead of the 3rd party.\n\n\n\n\n\n\n\n\nDXF or EPS Output file\n\n\nAutodesk format vector file - allows transmission of 2d build data to computer aided laser or water cutting.\n\n\n\n\n\n\n\n\nStereolithography File (STL)\n\n\nSTL files describe only the surface geometry of a three-dimensional object without any representation of color, texture or other common CAD model attributes. The STL format specifies both ASCII and binary representations. It is widely used for rapid prototyping and computer-aided manufacturing.\n\n\n\n\n\n\n\n\nSLDPRT, STEP and/or IGES File\n\n\nThe native format used by Solidworks to represent 3D geometry. STEP and IGES are portable file formats that are commonly used to represent this same geometry for the purpose of transmitting 3D design intent to a vendor. STEP is a better format than IGES and is preferred by most vendors. Best practices include sending both SLDPRT and STEP (or IGES) files in case the vendor is using a different version of Solidworks\u2014which is not backward-forward compatible.\n\n\n\n\n\n\n\n\nPDF Drawing File\n\n\nEssentially a Fabrication file for the mechanicals, containing all dimensions, tolerances, material requirements, etc. for the build.  This is the document a vendor will use to QA a built item.  It is also our assurance of recourse for any incorrect items we may receive.\n\n\n\n\n\n\n\n\nAMT\n\n\nAutomated Monkey Testing - The equivalent of TDD/CI for software - usually run in a fixed jig directly from firmware commits.\n\n\n\n\n\n\n\n\nPrototype\n\n\nItems made internally or externally that are not official production designs. These are not repeatable - they will never be re-made. Prototypes are internal engineering and test development only.\n\n\n\n\n\n\n\n\nFirst Article\n\n\nGoods made to test whether the entire release and manufacturing process is sound. These items should be considered completely production-ready. These releases include submitting a Purchase Order to an external vendor.", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#glossary", 
            "text": "Term  Description  Example      Raw Material  Any 3rd party item that we purchase and store unaltered.  LED strips    Value Add  A manufacture step or process where Codeshelf modifies one or more raw materials into a WIP or finished good.  Cut holes in NEMA enclosures    Work In Process (WIP)  Raw materials (or other WIP) that have been through a value-add step.  NEMA enclosures with holes cut in them    Finished Good  A complete item ready for installation or sale.  Aisle Controller    Kitting  Combining raw material and WIP into a kit to send to a value add step or to a customer.  A box of parts to make one or more CHEs    Gerber File  A machine file used to generate PCB copper layers.     Excellon (Drill) File  A machine file used to generate PCB vias and holes.     Centroid File  A machine file used to show the centers of ICs placed on a PCB by a pick-and-place machine     Bill of Materials  A list of component parts needed in a kit to build a WIP or finished good part.  Components needed to build a particular PCBA.    PCB Stackup  The number of copper and fiberglass layers, the copper weights, solder mask type/color and silkscreen color.     PCB Fabrication File  Instructions on how to manufacture PCB files. Includes notes, UL data, clarifications, revisions, etc.     Assembly File (Assy)  Complete assembly instructions for a WIP or finished good item.  LED tube assembly instructions     Flash/Test Jig  A device used to optionally flash and then test a WIP or finished good item during manufacture.     Release  An official release of a design from engineering to production for manufacture.     Revision/Version    A  named, tracked change to a previous release.     Engineering Change Order  A document that details all of the changes between two revisions or versions.  It should reference the revision numbers and the changes made between each release.  The CMS is not allowed to make any changes to this package, including vendor or part substitutions, without first looping back to Codeshelf with an ECO.     Engineering Change Request  An ECR is initiated by a CMS to suggest a change to a released device. The ECR initiates a process of discussion within the organization to determine the impact of a change and the best possible solution, potentially resulting in an ECO.     Release Package  A set of immutable documents that specify how to manufacture and test a particular version of a WIP or finished good item.     Git  A revision system for tracking document versions through time     Git commit  A specific document version committed to git for tracking and sharing.     Git tag  A named tag associated with any git commit.     Engineer  Design or production engineer     HWTE  Hardware Test Engineer     ProdMgr  Production Manager     Assembly File  This is a Word document with images that explains how to do any special assembly to and item.     PCBAs  Most of our boards can get built entirely in the pick-and-place robots, but if there is some unusual hand-assembly step, etc. then we need to include an assembly file to let the 3rd party manufacturers know how to do these steps.     Mechanicals  Many of our housings are currently assembled in house, but for larger manufacturing runs we need to include an assembly file to let the 3rd party manufacturers know how to assemble the items. For mechanical releases this file may be a step-by-step instruction manual with images and text describing the assembly process.     Test File  This is a Word document file that explains how to flash (optional) and test a WIP or finished goods item during manufacture.  This document is critical because it indicates our quality acceptance criteria from the manufacturer before they ship the part.  Any flaws found after delivery are expensive to resolve and may cost us instead of the 3rd party.     DXF or EPS Output file  Autodesk format vector file - allows transmission of 2d build data to computer aided laser or water cutting.     Stereolithography File (STL)  STL files describe only the surface geometry of a three-dimensional object without any representation of color, texture or other common CAD model attributes. The STL format specifies both ASCII and binary representations. It is widely used for rapid prototyping and computer-aided manufacturing.     SLDPRT, STEP and/or IGES File  The native format used by Solidworks to represent 3D geometry. STEP and IGES are portable file formats that are commonly used to represent this same geometry for the purpose of transmitting 3D design intent to a vendor. STEP is a better format than IGES and is preferred by most vendors. Best practices include sending both SLDPRT and STEP (or IGES) files in case the vendor is using a different version of Solidworks\u2014which is not backward-forward compatible.     PDF Drawing File  Essentially a Fabrication file for the mechanicals, containing all dimensions, tolerances, material requirements, etc. for the build.  This is the document a vendor will use to QA a built item.  It is also our assurance of recourse for any incorrect items we may receive.     AMT  Automated Monkey Testing - The equivalent of TDD/CI for software - usually run in a fixed jig directly from firmware commits.     Prototype  Items made internally or externally that are not official production designs. These are not repeatable - they will never be re-made. Prototypes are internal engineering and test development only.     First Article  Goods made to test whether the entire release and manufacturing process is sound. These items should be considered completely production-ready. These releases include submitting a Purchase Order to an external vendor.", 
            "title": "Glossary"
        }, 
        {
            "location": "/about/why/", 
            "text": "Why ZeroDiff?\n\n\nIn 2011 I started a side-project that would become my next startup: an innovative, low-power, cloud-controlled IoT device applied to e-commerce logistics and automation. Prior to 2011 I knew nothing about electrical, hardware or radio engineering. I tapped the many sites (Sparkfun, Instructables, Stack-Exchange, etc.) that explained how \"makers\" like me could learn to build hardware, and within 12 months I had a cloud-controlled hardware system complete enough to conduct my first pilot project. After we completed the pilot and collected all of the usability data, it was clear that \"version 2\" was going to be almost as much work to design/build as \"version 1!\"\n\n\nWhat these sites \ndon't\n explain is how to build a hardware business!\n\n\nUndeterred, we pressed on. Version 2 took almost six more months! The product was starting to look pro and we were able to raise money to become a real company. A frustrating problem was that more people and money had almost no material impact on our ability to rapidly innovate hardware designs. We would think, \"Oh, if the product could do X, then it would be awesome.\" We knew X wouldn't see the light of day for almost a year, and there was a growing pile of X-like feature requests. It was depressing. Right around this time, my wife asked me to clear out of the home shop so that our boys could have a big play space. That meant hauling to work a CNC mill and a bunch of tools. That same week we learned of our first opportunity to create an \"add on\" product to our system, but we didn't have 6-12 months to do it. The opportunity would disappear in 8-12 weeks. I went online to see if it was possible to create sophisticated SMT/SMD circuit boards on a CNC mill, and sure enough we found a tutorial for our exact mill. We hired a skilled machinist, and within two weeks we could generate a completed PCB/A in just a few days. At that time we used off-the-shelf enclosures that were expensive and ugly (to us by now). We decided to create a formal design studio and hired our design consultant to run it. He devised a system where we could build new enclosures in a CNC mill following a layer-by-layer stack-up process. This enabled us to create fairly complex, but good looking enclosures with features, like undercuts, that you normally can't create from a single, milled part. Eventually, we developed our design process further to incorporate folded steel to greatly increase our iteration and manufacture rate while bringing costs way down. The tooling we used is not expensive: likely you could recreate our entire shop for $50K, and a light-duty version of it for less than $25K.\n\n\nOver the course of a year we formalized this process into a set of internal processes and documentation we called ZeroDiff. Through these process improvements we were able to complete production-ready hardware design revisions in as little as 48 hours. Working with local vendor/partners we were able to source all of the components to make tens of thousands of sophisticated radio control systems entirely in our downtown Oakland office. \n\n\nNow to Share it\n\n\nWe had always intended to share our ZeroDiff process, but there just never seemed to be a good way (or time) to do it. All of the company docs were trapped in Confluence, which is not a particularly great system (not forkable, and now long on tooth). I really wanted this stuff to live in github, so that the community could share and possibly grow it without a lot of inter-organization coordination. Once I found mkdocs, it seemed clear this was the right way forward.\n\n\nA Work In Progress\n\n\nBecause I only lightly edited these documents as I extracted them, they still may have the company stink on them. They might also be incomplete, because it's just not possible to collect all the weird loose ends from our company system since it was spread across Confluence, Google Docs, Email and Jira. This is just a starting point, and I hope we all can grow this together.\n\n\nZeroDiff is not for Everyone\n\n\nI find that about 20% of the folks who hear about ZeroDiff \"get it\" and would like to embrace it. I'm not on a mission to sell ZeroDiff, and I recognize there's many ways to reach the same end in product development. It's just a simple idea, and never really should be complex. There's a certain kind of product auteur nowadays who can seem to do it all, and I find them fascinating no matter what process they follow.\n\n\nMake it Local Wherever Local is\n\n\nFinally, probably the most important part of ZeroDiff is that you can design and build a product close to the user \nwherever they are\n. This is the thing that excites me the most because I believe it unlocks a world where low-volume, high-value products can thrive **.\n\n\n\n\n\n** For the non-economic definitions of value: basically when there's no money in making people's lives better.", 
            "title": "Why ZeroDiff?"
        }, 
        {
            "location": "/about/why/#why-zerodiff", 
            "text": "In 2011 I started a side-project that would become my next startup: an innovative, low-power, cloud-controlled IoT device applied to e-commerce logistics and automation. Prior to 2011 I knew nothing about electrical, hardware or radio engineering. I tapped the many sites (Sparkfun, Instructables, Stack-Exchange, etc.) that explained how \"makers\" like me could learn to build hardware, and within 12 months I had a cloud-controlled hardware system complete enough to conduct my first pilot project. After we completed the pilot and collected all of the usability data, it was clear that \"version 2\" was going to be almost as much work to design/build as \"version 1!\"  What these sites  don't  explain is how to build a hardware business!  Undeterred, we pressed on. Version 2 took almost six more months! The product was starting to look pro and we were able to raise money to become a real company. A frustrating problem was that more people and money had almost no material impact on our ability to rapidly innovate hardware designs. We would think, \"Oh, if the product could do X, then it would be awesome.\" We knew X wouldn't see the light of day for almost a year, and there was a growing pile of X-like feature requests. It was depressing. Right around this time, my wife asked me to clear out of the home shop so that our boys could have a big play space. That meant hauling to work a CNC mill and a bunch of tools. That same week we learned of our first opportunity to create an \"add on\" product to our system, but we didn't have 6-12 months to do it. The opportunity would disappear in 8-12 weeks. I went online to see if it was possible to create sophisticated SMT/SMD circuit boards on a CNC mill, and sure enough we found a tutorial for our exact mill. We hired a skilled machinist, and within two weeks we could generate a completed PCB/A in just a few days. At that time we used off-the-shelf enclosures that were expensive and ugly (to us by now). We decided to create a formal design studio and hired our design consultant to run it. He devised a system where we could build new enclosures in a CNC mill following a layer-by-layer stack-up process. This enabled us to create fairly complex, but good looking enclosures with features, like undercuts, that you normally can't create from a single, milled part. Eventually, we developed our design process further to incorporate folded steel to greatly increase our iteration and manufacture rate while bringing costs way down. The tooling we used is not expensive: likely you could recreate our entire shop for $50K, and a light-duty version of it for less than $25K.  Over the course of a year we formalized this process into a set of internal processes and documentation we called ZeroDiff. Through these process improvements we were able to complete production-ready hardware design revisions in as little as 48 hours. Working with local vendor/partners we were able to source all of the components to make tens of thousands of sophisticated radio control systems entirely in our downtown Oakland office.", 
            "title": "Why ZeroDiff?"
        }, 
        {
            "location": "/about/why/#now-to-share-it", 
            "text": "We had always intended to share our ZeroDiff process, but there just never seemed to be a good way (or time) to do it. All of the company docs were trapped in Confluence, which is not a particularly great system (not forkable, and now long on tooth). I really wanted this stuff to live in github, so that the community could share and possibly grow it without a lot of inter-organization coordination. Once I found mkdocs, it seemed clear this was the right way forward.", 
            "title": "Now to Share it"
        }, 
        {
            "location": "/about/why/#a-work-in-progress", 
            "text": "Because I only lightly edited these documents as I extracted them, they still may have the company stink on them. They might also be incomplete, because it's just not possible to collect all the weird loose ends from our company system since it was spread across Confluence, Google Docs, Email and Jira. This is just a starting point, and I hope we all can grow this together.", 
            "title": "A Work In Progress"
        }, 
        {
            "location": "/about/why/#zerodiff-is-not-for-everyone", 
            "text": "I find that about 20% of the folks who hear about ZeroDiff \"get it\" and would like to embrace it. I'm not on a mission to sell ZeroDiff, and I recognize there's many ways to reach the same end in product development. It's just a simple idea, and never really should be complex. There's a certain kind of product auteur nowadays who can seem to do it all, and I find them fascinating no matter what process they follow.", 
            "title": "ZeroDiff is not for Everyone"
        }, 
        {
            "location": "/about/why/#make-it-local-wherever-local-is", 
            "text": "Finally, probably the most important part of ZeroDiff is that you can design and build a product close to the user  wherever they are . This is the thing that excites me the most because I believe it unlocks a world where low-volume, high-value products can thrive **.   \n** For the non-economic definitions of value: basically when there's no money in making people's lives better.", 
            "title": "Make it Local Wherever Local is"
        }, 
        {
            "location": "/about/contribute/", 
            "text": "Contribute\n\n\nI wrote the ZeroDiff docs using \nmkdocs\n and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that ZeroDiff can be a community effort.\n\n\nThe mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed.\n\n\nInstalling Python and mkdocs.\n\n\nPlease see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here.\n\n\nEditing the docs\n\n\nFrom a terminal session change to the top-level directory\n\n\n    \ncd ~/git/zerodiff\n    \nmkdocs serve\n\n\n\nNow from your browser go to the URL: \nhttp://127.0.0.1:8000\n\n\nAs you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes.\n\n\nGenerating the Static Documentation Website\n\n\nOnce you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore).\n\n\n    \nmkdocs build\n\n\n\nThis will generate a static documentation site in the directory ~/git/zerodiff/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory:\n\n\n    \ncd ~/git/zerodiff/site\n    \npython -m SimpleHTTPServer 8000\n\n\n\nNow from your browser go to the URL: \nhttp://127.0.0.1:8000\n\n\nCommit the Static Site to Github Project Pages (\"gh-pages\")\n\n\n    \ncd ~/git/zerodiff\n    \nmkdocs gh-deploy --clean\n\n\n\nThis command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be \nhttps://your_github_id.github.io/zerodiff/\n.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#contribute", 
            "text": "I wrote the ZeroDiff docs using  mkdocs  and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that ZeroDiff can be a community effort.  The mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#installing-python-and-mkdocs", 
            "text": "Please see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here.", 
            "title": "Installing Python and mkdocs."
        }, 
        {
            "location": "/about/contribute/#editing-the-docs", 
            "text": "From a terminal session change to the top-level directory       cd ~/git/zerodiff\n     mkdocs serve  Now from your browser go to the URL:  http://127.0.0.1:8000  As you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes.", 
            "title": "Editing the docs"
        }, 
        {
            "location": "/about/contribute/#generating-the-static-documentation-website", 
            "text": "Once you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore).       mkdocs build  This will generate a static documentation site in the directory ~/git/zerodiff/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory:       cd ~/git/zerodiff/site\n     python -m SimpleHTTPServer 8000  Now from your browser go to the URL:  http://127.0.0.1:8000", 
            "title": "Generating the Static Documentation Website"
        }, 
        {
            "location": "/about/contribute/#commit-the-static-site-to-github-project-pages-gh-pages", 
            "text": "cd ~/git/zerodiff\n     mkdocs gh-deploy --clean  This command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be  https://your_github_id.github.io/zerodiff/ .", 
            "title": "Commit the Static Site to Github Project Pages (\"gh-pages\")"
        }, 
        {
            "location": "/about/license/", 
            "text": "BSD License\n\n\nCopyright (c) 2016, Jeff Williams\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the \n nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL \n BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#bsd-license", 
            "text": "Copyright (c) 2016, Jeff Williams\nAll rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the   nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL   BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "BSD License"
        }
    ]
}